{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationAccuracy } from \"./Location.types\";\nimport { LocationSubscriber } from \"./LocationSubscribers\";\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n    window.navigator.geolocation = {\n      getCurrentPosition: getCurrentPosition,\n      watchPosition: watchPosition,\n      clearWatch: clearWatch,\n      stopObserving: function stopObserving() {}\n    };\n  }\n}\nfunction convertGeolocationOptions(options) {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced\n  };\n}\nfunction getCurrentPosition(success) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\nfunction _getCurrentPositionAsyncWrapper(_x, _x2, _x3) {\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\nfunction _getCurrentPositionAsyncWrapper2() {\n  _getCurrentPositionAsyncWrapper2 = _asyncToGenerator(function* (success, error, options) {\n    try {\n      yield ExpoLocation.requestPermissionsAsync();\n      var result = yield ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n      success(result);\n    } catch (e) {\n      error(e);\n    }\n  });\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\nfunction watchPosition(success, error, options) {\n  var watchId = LocationSubscriber.registerCallback(success);\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(function (err) {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({\n      watchId: watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\nfunction clearWatch(watchId) {\n  LocationSubscriber.unregisterCallback(watchId);\n}","map":{"version":3,"sources":["../src/GeolocationPolyfill.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,QAAQ,mBAAmB;AAE5C,OAAO,YAAY;AACnB,SAAyB,gBAAgB;AACzC,SAAS,kBAAkB;AAe3B,OAAM,SAAU,6BAA6B,GAAA;EAC3C,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IAEzB,IAAI,EAAE,QAAQ,IAAI,MAAM,CAAC,EAAE;MACzB,MAAM,CAAC,MAAM,GAAG,MAAM;IACvB;IACD,IAAI,EAAE,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;MACnC,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,CAAA,CAAE;IAC7B;IAGD,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG;MAC7B,kBAAkB,EAAlB,kBAAkB;MAClB,aAAa,EAAb,aAAa;MACb,UAAU,EAAV,UAAU;MAIV,aAAa,EAAE,yBAAK,CAAE;KACvB;EACF;AACH;AAEA,SAAS,yBAAyB,CAAC,OAA2B,EAAA;EAC5D,OAAO;IACL,QAAQ,EAAE,OAAO,CAAC,kBAAkB,GAAG,gBAAgB,CAAC,IAAI,GAAG,gBAAgB,CAAC;GACjF;AACH;AAEA,SAAS,kBAAkB,CACzB,OAAmC,EAEH;EAAA,IADhC,KAAA,uEAAkC,YAAK,CAAE,CAAC;EAAA,IAC1C,OAAA,uEAA8B,CAAA,CAAE;EAEhC,+BAA+B,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC;AAC1D;AAAC,SAIc,+BAA+B;EAAA;AAAA;AAAA;EAAA,qDAA9C,WACE,OAAmC,EACnC,KAA+B,EAC/B,OAA2B,EAAA;IAE3B,IAAI;MACF,MAAM,YAAY,CAAC,uBAAuB,EAAE;MAC5C,IAAM,MAAM,SAAS,YAAY,CAAC,uBAAuB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;MAC7F,OAAO,CAAC,MAAM,CAAC;KAChB,CAAC,OAAO,CAAC,EAAE;MACV,KAAK,CAAC,CAAC,CAAC;IACT;EACH,CAAC;EAAA;AAAA;AAGD,SAAS,aAAa,CACpB,OAAmC,EACnC,KAA+B,EAC/B,OAA2B,EAAA;EAE3B,IAAM,OAAO,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,OAAO,CAAC;EAE5D,YAAY,CAAC,sBAAsB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG,EAAI;IAClE,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC;IAC9C,KAAK,CAAC;MAAE,OAAO,EAAP,OAAO;MAAE,OAAO,EAAE,GAAG,CAAC,OAAO;MAAE,IAAI,EAAE,GAAG,CAAC;IAAI,CAAE,CAAC;EAC1D,CAAC,CAAC;EAEF,OAAO,OAAO;AAChB;AAGA,SAAS,UAAU,CAAC,OAAe,EAAA;EACjC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC;AAChD","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\ndeclare const global: any;\n\n// @needsAudit\n/**\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\n */\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Make sure `window.navigator` is defined in the global scope.\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
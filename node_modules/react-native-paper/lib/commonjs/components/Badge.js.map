{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","children","size","style","theme","visible","rest","current","opacity","React","useRef","Animated","Value","fontScale","isFirstRendering","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","isV3","colors","error","notification","restStyle","StyleSheet","flatten","textColor","onError","white","black","borderRadius","paddingHorizontal","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\nimport { white, black } from '../styles/themes/v2/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\nimport type { Theme } from '../types';\n\nconst defaultSize = 20;\n\nexport type Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { fontScale } = useWindowDimensions();\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const {\n    backgroundColor = theme.isV3\n      ? theme.colors.error\n      : theme.colors?.notification,\n    ...restStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = theme.isV3\n    ? theme.colors.onError\n    : getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  const paddingHorizontal = theme.isV3 ? 3 : 4;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...(!theme.isV3 && theme.fonts.regular),\n          lineHeight: size / fontScale,\n          height: size,\n          minWidth: size,\n          borderRadius,\n          paddingHorizontal,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    overflow: 'hidden',\n  },\n});\n"]}
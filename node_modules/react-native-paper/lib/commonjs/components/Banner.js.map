{"version":3,"sources":["Banner.tsx"],"names":["DEFAULT_MAX_WIDTH","Banner","visible","icon","children","actions","contentStyle","elevation","style","theme","onShowAnimationFinished","onHideAnimationFinished","rest","current","position","React","useRef","Animated","Value","layout","setLayout","useState","height","measured","scale","animation","useEffect","timing","duration","toValue","useNativeDriver","start","handleLayout","nativeEvent","multiply","translateY","add","isV3","styles","wrapper","absolute","transform","opacity","content","message","color","colors","onSurface","text","map","i","label","others","button","primary","StyleSheet","create","overflow","alignSelf","width","maxWidth","top","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button/Button';\nimport Icon, { IconSource } from './Icon';\nimport { withTheme } from '../core/theming';\nimport type { $RemoveChildren, Theme } from '../types';\n\nconst DEFAULT_MAX_WIDTH = 960;\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: string;\n  /**\n   * Icon to display for the `Banner`. Can be an image.\n   */\n  icon?: IconSource;\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions: Array<\n    {\n      label: string;\n    } & Omit<React.ComponentProps<typeof Button>, 'children'>\n  >;\n  /**\n   * Style of banner's inner content.\n   * Use this prop to apply custom width for wide layouts.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Banner shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * @optional\n   * Optional callback that will be called after the opening animation finished running normally\n   */\n  onShowAnimationFinished?: Animated.EndCallback;\n  /**\n   * @optional\n   * Optional callback that will be called after the closing animation finished running normally\n   */\n  onHideAnimationFinished?: Animated.EndCallback;\n};\n\ntype NativeEvent = {\n  nativeEvent: {\n    layout: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  };\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Banner = ({\n  visible,\n  icon,\n  children,\n  actions,\n  contentStyle,\n  elevation = 1,\n  style,\n  theme,\n  onShowAnimationFinished = () => {},\n  onHideAnimationFinished = () => {},\n  ...rest\n}: Props) => {\n  const { current: position } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    measured: boolean;\n  }>({\n    height: 0,\n    measured: false,\n  });\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false,\n      }).start(onShowAnimationFinished);\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false,\n      }).start(onHideAnimationFinished);\n    }\n  }, [visible, position, scale]);\n\n  const handleLayout = ({ nativeEvent }: NativeEvent) => {\n    const { height } = nativeEvent.layout;\n    setLayout({ height, measured: true });\n  };\n\n  // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n  const height = Animated.multiply(position, layout.height);\n\n  const translateY = Animated.multiply(\n    Animated.add(position, -1),\n    layout.height\n  );\n  return (\n    <Surface\n      {...rest}\n      style={[!theme.isV3 && styles.elevation, style]}\n      theme={theme}\n      {...(theme.isV3 && { elevation })}\n    >\n      <View style={[styles.wrapper, contentStyle]}>\n        <Animated.View style={{ height }} />\n        <Animated.View\n          onLayout={handleLayout}\n          style={[\n            layout.measured || !visible\n              ? // If we have measured banner's height or it's invisible,\n                // Position it absolutely, the layout will be taken care of the spacer\n                [styles.absolute, { transform: [{ translateY }] }]\n              : // Otherwise position it normally\n                null,\n            !layout.measured && !visible\n              ? // If we haven't measured banner's height yet and it's invisible,\n                // hide it with opacity: 0 so user doesn't see it\n                { opacity: 0 }\n              : null,\n          ]}\n        >\n          <View style={styles.content}>\n            {icon ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={40} />\n              </View>\n            ) : null}\n            <Text\n              style={[\n                styles.message,\n                {\n                  color: theme.isV3\n                    ? theme.colors.onSurface\n                    : theme.colors.text,\n                },\n              ]}\n              accessibilityLiveRegion={visible ? 'polite' : 'none'}\n              accessibilityRole=\"alert\"\n            >\n              {children}\n            </Text>\n          </View>\n          <View style={styles.actions}>\n            {actions.map(({ label, ...others }, i) => (\n              <Button\n                key={/* eslint-disable-line react/no-array-index-key */ i}\n                compact\n                mode=\"text\"\n                style={styles.button}\n                textColor={theme.colors?.primary}\n                {...others}\n              >\n                {label}\n              </Button>\n            ))}\n          </View>\n        </Animated.View>\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  icon: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n  elevation: {\n    elevation: 1,\n  },\n});\n\nexport default withTheme(Banner);\n"]}
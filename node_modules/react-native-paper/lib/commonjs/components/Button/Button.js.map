{"version":3,"sources":["Button.tsx"],"names":["Button","disabled","compact","mode","dark","loading","icon","buttonColor","customButtonColor","textColor","customTextColor","children","accessibilityLabel","accessibilityHint","onPress","onPressIn","onPressOut","onLongPress","style","theme","uppercase","isV3","contentStyle","labelStyle","testID","accessible","rest","isMode","React","useCallback","modeToCompare","roundness","animation","isElevationEntitled","initialElevation","activeElevation","current","elevation","useRef","Animated","Value","useEffect","setValue","handlePressIn","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","borderRadius","iconSize","backgroundColor","borderColor","borderWidth","rippleColor","alpha","rgb","string","buttonStyle","touchableStyle","StyleSheet","flatten","color","customLabelColor","fontSize","customLabelSize","textStyle","typescale","labelLarge","fonts","medium","iconStyle","flexDirection","styles","iconReverse","md3IconReverse","md3IconReverseTextMode","md3Icon","md3IconTextMode","button","content","label","md2Label","md3LabelTextAddons","md3LabelText","md3Label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","marginVertical","marginHorizontal","letterSpacing","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { ButtonMode, getButtonColors } from './utils';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline, used for the lowest priority actions, especially when presenting multiple options.\n   * - `outlined` - button with an outline without background, typically used for important, but not primary action â€“ represents medium emphasis.\n   * - `contained` - button with a background color, used for important action, have the most visual impact and high emphasis.\n   * - `elevated` - button with a background color and elevation, used when absolutely necessary e.g. button requires visual separation from a patterned background. @supported Available in v5.x with theme version 3\n   * - `contained-tonal` - button with a secondary background color, an alternative middle ground between contained and outlined buttons. @supported Available in v5.x with theme version 3\n   */\n  mode?: 'text' | 'outlined' | 'contained' | 'elevated' | 'contained-tonal';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for:\n   *  * `contained` mode for theme version 2\n   *  * `contained`, `contained-tonal` and `elevated` modes for theme version 3.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * @deprecated Deprecated in v5.x - use `buttonColor` or `textColor` instead.\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * @supported Available in v5.x\n   * Custom button's background color.\n   */\n  buttonColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Custom button's text color.\n   */\n  textColor?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: () => void;\n  /**\n   * @supported Available in v5.x\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-4.png\" />\n *     <figcaption>Elevated button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-5.png\" />\n *     <figcaption>Contained-tonal button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  buttonColor: customButtonColor,\n  textColor: customTextColor,\n  children,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  style,\n  theme,\n  uppercase = !theme.isV3,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: ButtonMode) => {\n      return mode === modeToCompare;\n    },\n    [mode]\n  );\n  const { roundness, isV3, animation } = theme;\n\n  const isElevationEntitled =\n    !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isElevationEntitled ? initialElevation : 0)\n  );\n\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  const handlePressIn = () => {\n    onPressIn?.();\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    onPressOut?.();\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n\n  const { backgroundColor, borderColor, textColor, borderWidth } =\n    getButtonColors({\n      customButtonColor,\n      customTextColor,\n      theme,\n      mode,\n      disabled,\n      dark,\n    });\n\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        borderRadius\n      : borderRadius,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = {\n    color: textColor,\n    ...(isV3 ? theme.typescale.labelLarge : theme.fonts.medium),\n  };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? [\n          styles.iconReverse,\n          isV3 && styles.md3IconReverse,\n          isV3 && isMode('text') && styles.md3IconReverseTextMode,\n        ]\n      : [\n          styles.icon,\n          isV3 && styles.md3Icon,\n          isV3 && isMode('text') && styles.md3IconTextMode,\n        ];\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          styles.button,\n          compact && styles.compact,\n          buttonStyle,\n          style,\n          !isV3 && { elevation },\n        ] as ViewStyle\n      }\n      {...(isV3 && { elevation: elevation })}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? iconSize}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? iconSize}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              !isV3 && styles.md2Label,\n              isV3 &&\n                (isMode('text')\n                  ? icon || loading\n                    ? styles.md3LabelTextAddons\n                    : styles.md3LabelText\n                  : styles.md3Label),\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16,\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16,\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8,\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12,\n  },\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  md2Label: {\n    letterSpacing: 1,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24,\n  },\n  md3LabelText: {\n    marginHorizontal: 12,\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16,\n  },\n});\n\nexport default withTheme(Button);\n"]}
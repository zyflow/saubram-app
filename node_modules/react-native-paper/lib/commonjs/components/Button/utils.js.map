{"version":3,"sources":["utils.tsx"],"names":["isDark","dark","backgroundColor","isLight","getButtonBackgroundColor","isMode","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","white","black","alpha","rgb","string","getButtonTextColor","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","outline","getButtonBorderWidth","StyleSheet","hairlineWidth","getButtonColors","mode","modeToCompare","textColor","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: Theme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: Theme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"]}
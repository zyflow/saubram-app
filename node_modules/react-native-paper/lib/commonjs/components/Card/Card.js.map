{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","isMode","React","useCallback","modeToCompare","current","useRef","Animated","Value","elevationDarkAdaptive","animation","dark","roundness","isV3","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","computedElevation","backgroundColor","borderColor","borderRadius","styles","resetElevation","outline","undefined","innerContainer","index","cloneElement","Content","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","StyleSheet","create","flexGrow","flexShrink","borderWidth","position","width","height","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getCardColors } from './utils';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype ContainedCardProps = {\n  mode?: 'contained';\n  elevation?: never;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Mode = 'elevated' | 'outlined' | 'contained';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Changes Card shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `contained` - Card with without outline and elevation @supported Available in v5.x with theme version 3\n   * - `outlined` - Card with an outline.\n   */\n  mode?: Mode;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/card-1.png\" />\n *     <figcaption>Elevated card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-2.png\" />\n *     <figcaption>Outlined card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-3.png\" />\n *     <figcaption>Contained card</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps | ContainedCardProps) & Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: Mode) => {\n      return cardMode === modeToCompare;\n    },\n    [cardMode]\n  );\n\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness, isV3 } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  const { backgroundColor, borderColor } = getCardColors({\n    theme,\n    mode: cardMode,\n  });\n\n  return (\n    <Surface\n      style={[\n        {\n          borderRadius: roundness,\n        },\n        isV3 && { backgroundColor },\n        !isV3 && isMode('outlined')\n          ? styles.resetElevation\n          : {\n              elevation: computedElevation as unknown as number,\n            },\n        style,\n      ]}\n      theme={theme}\n      {...(isV3 && {\n        elevation: isMode('elevated') ? computedElevation : 0,\n      })}\n      {...rest}\n    >\n      {isMode('outlined') && (\n        <View\n          pointerEvents=\"none\"\n          style={[\n            {\n              borderRadius: roundness,\n              borderColor,\n            },\n            styles.outline,\n          ]}\n        />\n      )}\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  },\n  resetElevation: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(Card);\n"]}
{"version":3,"sources":["CardTitle.tsx"],"names":["LEFT_SIZE","CardTitle","title","titleStyle","titleNumberOfLines","titleVariant","subtitle","subtitleStyle","subtitleNumberOfLines","subtitleVariant","left","leftStyle","right","rightStyle","style","theme","titleComponent","props","isV3","subtitleComponent","TextComponent","React","memo","component","rest","createElement","styles","container","minHeight","size","titles","marginBottom","displayName","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingLeft","marginRight","height","width","flex","paddingRight","marginVertical"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport type { MD3TypescaleKey, Theme } from '../../types';\nimport Caption from '../Typography/v2/Caption';\nimport Title from '../Typography/v2/Title';\nimport Text from '../Typography/Text';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Text for the title. Note that this will only accept a string or `<Text>`-based node.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the title.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Title text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  titleVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * Text for the subtitle. Note that this will only accept a string or `<Text>`-based node.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the subtitle.\n   */\n  subtitleNumberOfLines?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Subtitle text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  subtitleVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the left element wrapper.\n   */\n  leftStyle?: StyleProp<ViewStyle>;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the right element wrapper.\n   */\n  rightStyle?: StyleProp<ViewStyle>;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst LEFT_SIZE = 40;\n\n/**\n * A component to show a title, subtitle and an avatar inside a Card.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/card-title-1.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Card, IconButton } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card.Title\n *     title=\"Card Title\"\n *     subtitle=\"Card Subtitle\"\n *     left={(props) => <Avatar.Icon {...props} icon=\"folder\" />}\n *     right={(props) => <IconButton {...props} icon=\"more-vert\" onPress={() => {}} />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardTitle = ({\n  title,\n  titleStyle,\n  titleNumberOfLines = 1,\n  titleVariant = 'bodyLarge',\n  subtitle,\n  subtitleStyle,\n  subtitleNumberOfLines = 1,\n  subtitleVariant = 'bodyMedium',\n  left,\n  leftStyle,\n  right,\n  rightStyle,\n  style,\n  theme,\n}: Props) => {\n  const titleComponent = (props: any) =>\n    theme.isV3 ? <Text {...props} /> : <Title {...props} />;\n\n  const subtitleComponent = (props: any) =>\n    theme.isV3 ? <Text {...props} /> : <Caption {...props} />;\n\n  const TextComponent = React.memo(({ component, ...rest }: any) =>\n    React.createElement(component, rest)\n  );\n  return (\n    <View\n      style={[\n        styles.container,\n        { minHeight: subtitle || left || right ? 72 : 50 },\n        style,\n      ]}\n    >\n      {left ? (\n        <View style={[styles.left, leftStyle]}>\n          {left({\n            size: LEFT_SIZE,\n          })}\n        </View>\n      ) : null}\n\n      <View style={[styles.titles]}>\n        {title && (\n          <TextComponent\n            component={titleComponent}\n            style={[\n              styles.title,\n              { marginBottom: subtitle ? 0 : 2 },\n              titleStyle,\n            ]}\n            numberOfLines={titleNumberOfLines}\n            variant={titleVariant}\n          >\n            {title}\n          </TextComponent>\n        )}\n        {subtitle && (\n          <TextComponent\n            component={subtitleComponent}\n            style={[styles.subtitle, subtitleStyle]}\n            numberOfLines={subtitleNumberOfLines}\n            variant={subtitleVariant}\n          >\n            {subtitle}\n          </TextComponent>\n        )}\n      </View>\n      <View style={rightStyle}>{right ? right({ size: 24 }) : null}</View>\n    </View>\n  );\n};\n\nCardTitle.displayName = 'Card.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16,\n  },\n\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE,\n  },\n\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  title: {\n    minHeight: 30,\n    paddingRight: 16,\n  },\n\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n    paddingRight: 16,\n  },\n});\n\nexport default withTheme(CardTitle);\n\n// @component-docs ignore-next-line\nexport { CardTitle };\n"]}
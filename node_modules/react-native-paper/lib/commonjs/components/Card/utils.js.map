{"version":3,"sources":["utils.tsx"],"names":["getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","white","alpha","rgb","string","black","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"mappings":";;;;;;;AAAA;;AACA;;;;AAKO,MAAMA,iBAAiB,GAAG,QAQ3B;AAAA,MAR4B;AAChCC,IAAAA,KADgC;AAEhCC,IAAAA,KAFgC;AAGhCC,IAAAA;AAHgC,GAQ5B;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAsBJ,KAA5B;;AAEA,MAAIC,KAAK,KAAK,CAAd,EAAiB;AACf,QAAIC,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO;AACLG,QAAAA,YAAY,EAAED;AADT,OAAP;AAGD;;AAED,QAAID,IAAJ,EAAU;AACR,aAAO;AACLE,QAAAA,YAAY,EAAED;AADT,OAAP;AAGD;;AAED,WAAO;AACLE,MAAAA,mBAAmB,EAAEF,SADhB;AAELG,MAAAA,oBAAoB,EAAEH;AAFjB,KAAP;AAID;;AAED,MAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;AACpD,WAAO;AACLM,MAAAA,sBAAsB,EAAEJ;AADnB,KAAP;AAGD;;AAED,SAAOK,SAAP;AACD,CArCM;;;;AAuCP,MAAMC,cAAc,GAAG,SAAiC;AAAA,MAAhC;AAAEV,IAAAA;AAAF,GAAgC;;AACtD,MAAIA,KAAK,CAACG,IAAV,EAAgB;AACd,WAAOH,KAAK,CAACW,MAAN,CAAaC,OAApB;AACD;;AAED,MAAIZ,KAAK,CAACa,IAAV,EAAgB;AACd,WAAO,oBAAMC,aAAN,EAAaC,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EAAP;AACD;;AACD,SAAO,oBAAMC,aAAN,EAAaH,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EAAP;AACD,CATD;;AAWA,MAAME,kBAAkB,GAAG,SAMrB;AAAA,MANsB;AAC1BnB,IAAAA,KAD0B;AAE1BoB,IAAAA;AAF0B,GAMtB;;AACJ,MAAIpB,KAAK,CAACG,IAAV,EAAgB;AACd,QAAIiB,MAAM,CAAC,WAAD,CAAV,EAAyB;AACvB,aAAOpB,KAAK,CAACW,MAAN,CAAaU,cAApB;AACD;;AACD,WAAOrB,KAAK,CAACW,MAAN,CAAaW,OAApB;AACD;;AACD,SAAOb,SAAP;AACD,CAdD;;AAgBO,MAAMc,aAAa,GAAG,SAMvB;AAAA,MANwB;AAC5BvB,IAAAA,KAD4B;AAE5BwB,IAAAA;AAF4B,GAMxB;;AACJ,QAAMJ,MAAM,GAAIK,aAAD,IAA6B;AAC1C,WAAOD,IAAI,KAAKC,aAAhB;AACD,GAFD;;AAIA,SAAO;AACLC,IAAAA,eAAe,EAAEP,kBAAkB,CAAC;AAClCnB,MAAAA,KADkC;AAElCoB,MAAAA;AAFkC,KAAD,CAD9B;AAKLO,IAAAA,WAAW,EAAEjB,cAAc,CAAC;AAAEV,MAAAA;AAAF,KAAD;AALtB,GAAP;AAOD,CAlBM","sourcesContent":["import color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { Theme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: Theme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    if (isV3) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: Theme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: Theme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    return theme.colors.surface;\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: Theme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]}
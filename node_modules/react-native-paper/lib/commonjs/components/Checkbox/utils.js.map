{"version":3,"sources":["utils.ts"],"names":["getAndroidCheckedColor","theme","customColor","isV3","colors","primary","accent","getAndroidUncheckedColor","customUncheckedColor","onSurfaceVariant","dark","text","alpha","rgb","string","getAndroidRippleColor","checkedColor","disabled","onSurface","fade","getAndroidControlColor","checked","uncheckedColor","onSurfaceDisabled","getAndroidSelectionControlColor","rippleColor","selectionControlColor","getIOSCheckedColor","getIOSRippleColor","getSelectionControlIOSColor"],"mappings":"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","sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\nconst getAndroidCheckedColor = ({\n  theme,\n  customColor,\n}: {\n  theme: Theme;\n  customColor?: string;\n}) => {\n  if (customColor) {\n    return customColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n\n  return theme.colors.accent;\n};\n\nconst getAndroidUncheckedColor = ({\n  theme,\n  customUncheckedColor,\n}: {\n  theme: Theme;\n  customUncheckedColor?: string;\n}) => {\n  if (customUncheckedColor) {\n    return customUncheckedColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.7).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.54).rgb().string();\n};\n\nconst getAndroidRippleColor = ({\n  theme,\n  checkedColor,\n  disabled,\n}: {\n  theme: Theme;\n  checkedColor: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return color(theme.colors.onSurface).alpha(0.16).rgb().string();\n    }\n    return color(theme.colors.text).alpha(0.16).rgb().string();\n  }\n\n  return color(checkedColor).fade(0.32).rgb().string();\n};\n\nconst getAndroidControlColor = ({\n  theme,\n  checked,\n  disabled,\n  checkedColor,\n  uncheckedColor,\n}: {\n  theme: Theme;\n  checked: boolean;\n  checkedColor: string;\n  uncheckedColor: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.text;\n  }\n\n  if (checked) {\n    return checkedColor;\n  }\n  return uncheckedColor;\n};\n\nexport const getAndroidSelectionControlColor = ({\n  theme,\n  disabled,\n  checked,\n  customColor,\n  customUncheckedColor,\n}: {\n  theme: Theme;\n  checked: boolean;\n  disabled?: boolean;\n  customColor?: string;\n  customUncheckedColor?: string;\n}) => {\n  const checkedColor = getAndroidCheckedColor({ theme, customColor });\n  const uncheckedColor = getAndroidUncheckedColor({\n    theme,\n    customUncheckedColor,\n  });\n  return {\n    rippleColor: getAndroidRippleColor({ theme, checkedColor, disabled }),\n    selectionControlColor: getAndroidControlColor({\n      theme,\n      disabled,\n      checked,\n      checkedColor,\n      uncheckedColor,\n    }),\n  };\n};\n\nconst getIOSCheckedColor = ({\n  theme,\n  disabled,\n  customColor,\n}: {\n  theme: Theme;\n  customColor?: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.disabled;\n  }\n\n  if (customColor) {\n    return customColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n\n  return theme.colors.accent;\n};\n\nconst getIOSRippleColor = ({\n  theme,\n  checkedColor,\n  disabled,\n}: {\n  theme: Theme;\n  checkedColor: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return color(theme.colors.onSurface).alpha(0.16).rgb().string();\n    }\n    return color(theme.colors.text).alpha(0.16).rgb().string();\n  }\n  return color(checkedColor).fade(0.32).rgb().string();\n};\n\nexport const getSelectionControlIOSColor = ({\n  theme,\n  disabled,\n  customColor,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n  customColor?: string;\n}) => {\n  const checkedColor = getIOSCheckedColor({ theme, disabled, customColor });\n  return {\n    checkedColor,\n    rippleColor: getIOSRippleColor({\n      theme,\n      checkedColor,\n      disabled,\n    }),\n  };\n};\n"]}
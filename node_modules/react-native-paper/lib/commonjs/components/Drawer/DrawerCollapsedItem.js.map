{"version":3,"sources":["DrawerCollapsedItem.tsx"],"names":["badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","icon","label","active","theme","style","onPress","accessibilityLabel","badge","rest","isV3","scale","animation","numOfLines","setNumOfLines","React","useState","current","animScale","useRef","Animated","Value","useEffect","setValue","handlePressOut","timing","toValue","duration","useNativeDriver","start","iconPadding","backgroundColor","colors","secondaryContainer","labelColor","onSurface","onSurfaceVariant","iconColor","onSecondaryContainer","onTextLayout","nativeEvent","lines","length","androidLetterSpacingStyle","Platform","OS","styles","letterSpacing","undefined","selected","wrapper","outline","roundedOutline","transform","scaleX","top","badgeContainer","color","displayName","StyleSheet","create","width","marginBottom","minHeight","alignItems","height","borderRadius","justifyContent","position","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  Animated,\n  TouchableWithoutFeedback,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n  Platform,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport Badge from '../Badge';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Icon to display for the `DrawerCollapsedItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      icon=\"inbox\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  return (\n    <View {...rest}>\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n          />\n\n          <View style={[styles.icon, { top: iconPadding }]}>\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[\n                styles.label,\n                androidLetterSpacingStyle,\n                {\n                  color: labelColor,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withTheme(DrawerCollapsedItem);\n"]}
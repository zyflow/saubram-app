{"version":3,"sources":["utils.ts"],"names":["getBorderColor","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","iconColor","alpha","rgb","string","getIconButtonColor","mode","modeToCompare","baseIconColorProps","backgroundColor","rippleColor","borderColor"],"mappings":"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","sourcesContent":["import color from 'color';\nimport type { Theme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: Theme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: Theme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: Theme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]}
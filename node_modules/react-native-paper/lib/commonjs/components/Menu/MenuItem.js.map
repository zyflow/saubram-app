{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","leadingIcon","trailingIcon","dense","title","disabled","onPress","style","contentStyle","testID","titleStyle","accessibilityLabel","theme","titleColor","iconColor","underlayColor","isV3","containerPadding","iconWidth","minWidth","MIN_WIDTH","maxWidth","styles","container","paddingHorizontal","md3DenseContainer","row","item","width","content","md3LeadingIcon","md3WithoutLeadingIcon","color","displayName","StyleSheet","create","MAX_WIDTH","height","justifyContent","flexDirection","fontSize","marginHorizontal","marginLeft"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport {\n  getContentMaxWidth,\n  getMenuItemColor,\n  MAX_WIDTH,\n  MIN_WIDTH,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * @renamed Renamed from 'icon' to 'leadingIcon' in v5.x\n   *\n   * Leading icon to display for the `MenuItem`.\n   */\n  leadingIcon?: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Trailing icon to display for the `MenuItem`.\n   */\n  trailingIcon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Sets min height with densed layout.\n   */\n  dense?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item leadingIcon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item leadingIcon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item leadingIcon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item leadingIcon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item leadingIcon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  leadingIcon,\n  trailingIcon,\n  dense,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n  theme,\n}: Props) => {\n  const { titleColor, iconColor, underlayColor } = getMenuItemColor({\n    theme,\n    disabled,\n  });\n  const { isV3 } = theme;\n\n  const containerPadding = isV3 ? 12 : 8;\n\n  const iconWidth = isV3 ? 24 : 40;\n\n  const minWidth = MIN_WIDTH - (isV3 ? 12 : 16);\n\n  const maxWidth = getContentMaxWidth({\n    isV3,\n    iconWidth,\n    leadingIcon,\n    trailingIcon,\n  });\n\n  return (\n    <TouchableRipple\n      style={[\n        styles.container,\n        { paddingHorizontal: containerPadding },\n        dense && styles.md3DenseContainer,\n        style,\n      ]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n      underlayColor={underlayColor}\n    >\n      <View style={styles.row}>\n        {leadingIcon ? (\n          <View\n            style={[!isV3 && styles.item, { width: iconWidth }]}\n            pointerEvents=\"box-none\"\n          >\n            <Icon source={leadingIcon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            !isV3 && styles.item,\n            styles.content,\n            { minWidth, maxWidth },\n            isV3 &&\n              (leadingIcon\n                ? styles.md3LeadingIcon\n                : styles.md3WithoutLeadingIcon),\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            variant=\"bodyLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[!isV3 && styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n        {isV3 && trailingIcon ? (\n          <View\n            style={[!isV3 && styles.item, { width: iconWidth }]}\n            pointerEvents=\"box-none\"\n          >\n            <Icon source={trailingIcon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    minWidth: MIN_WIDTH,\n    maxWidth: MAX_WIDTH,\n    height: 48,\n    justifyContent: 'center',\n  },\n  md3DenseContainer: {\n    height: 32,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n  },\n  md3LeadingIcon: {\n    marginLeft: 12,\n  },\n  md3WithoutLeadingIcon: {\n    marginLeft: 4,\n  },\n});\n\nexport default withTheme(MenuItem);\n"]}
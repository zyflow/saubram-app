{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","contextValue","onValueChange","styles","container","font","displayName","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport type { MD3TypescaleKey, Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={() =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]}
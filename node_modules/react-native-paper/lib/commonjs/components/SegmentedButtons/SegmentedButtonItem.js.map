{"version":3,"sources":["SegmentedButtonItem.tsx"],"names":["SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","checkScale","React","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","showIcon","textStyle","textTransform","fontWeight","color","styles","button","content","undefined","StyleSheet","create","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAsDA,MAAMA,mBAAmB,GAAG,QAYf;AAAA,MAZgB;AAC3BC,IAAAA,OAD2B;AAE3BC,IAAAA,kBAF2B;AAG3BC,IAAAA,QAH2B;AAI3BC,IAAAA,KAJ2B;AAK3BC,IAAAA,iBAL2B;AAM3BC,IAAAA,IAN2B;AAO3BC,IAAAA,MAP2B;AAQ3BC,IAAAA,KAR2B;AAS3BC,IAAAA,OAT2B;AAU3BC,IAAAA,OAV2B;AAW3BC,IAAAA,OAAO,GAAG;AAXiB,GAYhB;AACX,QAAMC,KAAK,GAAG,wBAAd;AAEA,QAAMC,UAAU,GAAGC,KAAK,CAACC,MAAN,CAAa,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAAvD;AAEAJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACd,iBAAL,EAAwB;AACtB;AACD;;AACD,QAAIJ,OAAJ,EAAa;AACXe,4BAASI,MAAT,CAAgBP,UAAhB,EAA4B;AAC1BQ,QAAAA,OAAO,EAAE,CADiB;AAE1BC,QAAAA,eAAe,EAAE;AAFS,OAA5B,EAGGC,KAHH;AAID,KALD,MAKO;AACLP,4BAASI,MAAT,CAAgBP,UAAhB,EAA4B;AAC1BQ,QAAAA,OAAO,EAAE,CADiB;AAE1BC,QAAAA,eAAe,EAAE;AAFS,OAA5B,EAGGC,KAHH;AAID;AACF,GAfD,EAeG,CAACtB,OAAD,EAAUY,UAAV,EAAsBR,iBAAtB,CAfH;AAiBA,QAAM;AAAEmB,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBb,KAA5B;AACA,QAAM;AAAEc,IAAAA,WAAF;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,WAA1B;AAAuCC,IAAAA;AAAvC,MACJ,qCAAyB;AACvB5B,IAAAA,OADuB;AAEvBW,IAAAA,KAFuB;AAGvBT,IAAAA;AAHuB,GAAzB,CADF;AAOA,QAAM2B,YAAY,GAAG,CAACL,IAAI,GAAG,CAAH,GAAO,CAAZ,IAAiBD,SAAtC;AACA,QAAMO,mBAAmB,GAAG,2CAA+B;AACzDnB,IAAAA,KADyD;AAEzDF,IAAAA;AAFyD,GAA/B,CAA5B;AAIA,QAAMsB,WAAW,GAAG,oBAAML,SAAN,EAAiBM,KAAjB,CAAuB,IAAvB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAApB;AAEA,QAAMC,QAAQ,GAAGX,IAAI,GAAG,EAAH,GAAQ,EAA7B;AACA,QAAMY,SAAS,GAAG;AAChBC,IAAAA,WAAW,EAAE9B,KAAK,GAAG,CAAH,GAAOP,OAAO,IAAII,iBAAX,GAA+B,CAA/B,GAAmC,CAD5C;AAEhB,QAAIG,KAAK,IAAI;AACX+B,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,KAAK,EAAE3B,UAAU,CAAC4B,WAAX,CAAuB;AAC5BC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADgB;AAE5BC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFe,SAAvB;AADT,OADS;AADA,KAAb;AAFgB,GAAlB;AAcA,QAAMC,WAAsB,GAAG;AAC7Bf,IAAAA,eAD6B;AAE7BH,IAAAA,WAF6B;AAG7BE,IAAAA,WAH6B;AAI7BE,IAAAA,YAJ6B;AAK7B,OAAGC;AAL0B,GAA/B;AAOA,QAAMc,eAAe,GAAG,6CAAiC;AAAElC,IAAAA;AAAF,GAAjC,CAAxB;AACA,QAAMmC,WAAsB,GAAG;AAC7BhB,IAAAA,YAD6B;AAE7B,OAAGC;AAF0B,GAA/B;AAIA,QAAMgB,QAAQ,GAAGzC,IAAI,IAAI,CAACE,KAAT,GAAiB,IAAjB,GAAwBP,OAAO,GAAG,CAACI,iBAAJ,GAAwB,IAAxE;AACA,QAAM2C,SAAoB,GAAG,EAC3B,IAAI,CAACvB,IAAD,IAAS;AACXwB,MAAAA,aAAa,EAAE,WADJ;AAEXC,MAAAA,UAAU,EAAE;AAFD,KAAb,CAD2B;AAK3BC,IAAAA,KAAK,EAAExB;AALoB,GAA7B;AAQA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACiB,WAAD,EAAcQ,MAAM,CAACC,MAArB,EAA6BjD,KAA7B;AAAb,kBACE,oBAAC,wBAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,YAAY,EAAE,CAFhB;AAGE,IAAA,OAAO,EAAEK,OAHX;AAIE,IAAA,kBAAkB,EAAEP,kBAJtB;AAKE,IAAA,kBAAkB,EAAE;AAAEC,MAAAA,QAAF;AAAYF,MAAAA;AAAZ,KALtB;AAME,IAAA,iBAAiB,EAAC,QANpB;AAOE,IAAA,QAAQ,EAAEE,QAPZ;AAQE,IAAA,WAAW,EAAE6B,WARf;AASE,IAAA,MAAM,EAAEzB,MATV;AAUE,IAAA,KAAK,EAAEuC;AAVT,kBAYE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACE,OAAR,EAAiB;AAAET,MAAAA;AAAF,KAAjB;AAAb,KACG5C,OAAO,IAAII,iBAAX,gBACC,oBAAC,qBAAD,CAAU,IAAV;AACE,IAAA,MAAM,EAAG,GAAEE,MAAO,aADpB;AAEE,IAAA,KAAK,EAAE,CAAC8B,SAAD,EAAY;AAAEE,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAE3B;AAAT,OAAD;AAAb,KAAZ;AAFT,kBAIE,oBAAC,aAAD;AAAM,IAAA,MAAM,EAAE,OAAd;AAAuB,IAAA,IAAI,EAAEuB;AAA7B,IAJF,CADD,GAOG,IARN,EASGW,QAAQ,gBACP,oBAAC,qBAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEV;AAAtB,kBACE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAE/B,IADV;AAEE,IAAA,IAAI,EAAE8B,QAFR;AAGE,IAAA,KAAK,EAAEjC,QAAQ,GAAGwB,SAAH,GAAe4B;AAHhC,IADF,CADO,GAQL,IAjBN,eAkBE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAC,YADV;AAEE,IAAA,KAAK,EAAE,CAACH,MAAM,CAAC5C,KAAR,EAAewC,SAAf,CAFT;AAGE,IAAA,UAAU,EAAE,KAHd;AAIE,IAAA,aAAa,EAAE;AAJjB,KAMGxC,KANH,CAlBF,CAZF,CADF,CADF;AA4CD,CAjID;;AAmIA,MAAM4C,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,MAAM,EAAE;AACNK,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,WAAW,EAAE;AAFP,GADuB;AAK/BnD,EAAAA,KAAK,EAAE;AACLoD,IAAAA,SAAS,EAAE;AADN,GALwB;AAQ/BN,EAAAA,OAAO,EAAE;AACPO,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE,QAHT;AAIPlB,IAAAA,eAAe,EAAE,CAJV;AAKPmB,IAAAA,iBAAiB,EAAE;AALZ;AARsB,CAAlB,CAAf;;eAiBehE,mB;;AAEf,MAAMiE,wBAAwB,GAAGjE,mBAAjC","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n  StyleSheet,\n  View,\n  TextStyle,\n  Animated,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { IconSource } from '../Icon';\nimport color from 'color';\nimport Icon from '../Icon';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  const textStyle: TextStyle = {\n    ...(!isV3 && {\n      textTransform: 'uppercase',\n      fontWeight: '500',\n    }),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {checked && showSelectedCheck ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, textStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"]}
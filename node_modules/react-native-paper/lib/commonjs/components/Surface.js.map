{"version":3,"sources":["Surface.tsx"],"names":["MD2Surface","style","theme","overrideTheme","rest","elevation","StyleSheet","flatten","dark","isDarkTheme","mode","colors","backgroundColor","surface","Surface","children","overridenTheme","testID","props","isV3","inputRange","interpolate","outputRange","map","Platform","OS","elevationLevel","getElevationAndroid","margin","padding","transform","borderRadius","outerLayerStyles","sharedStyle","iOSShadowOutputRanges","shadowOpacity","height","shadowRadius","shadowColor","position","alignSelf","top","left","right","bottom","restStyle","absoluteStyles","getStyleForAnimatedShadowLayer","layer","extrapolate","shadowOffset","width","getStyleForShadowLayer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\nimport shadow from '../styles/shadow';\nimport { useTheme } from '../core/theming';\nimport overlay, { isAnimatedValue } from '../styles/overlay';\nimport type { MD3Elevation, Theme } from '../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes shadows and background on iOS and Android.\n   * Used to create UI hierarchy between components.\n   *\n   * Note: In version 2 the `elevation` prop was accepted via `style` prop i.e. `style={{ elevation: 4 }}`.\n   * It's no longer supported with theme version 3 and you should use `elevation` property instead.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst MD2Surface = ({\n  style,\n  theme: overrideTheme,\n  ...rest\n}: Omit<Props, 'elevation'>) => {\n  const { elevation = 4 } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const { dark: isDarkTheme, mode, colors } = useTheme(overrideTheme);\n\n  return (\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors?.surface)\n              : colors?.surface,\n        },\n        elevation ? shadow(elevation) : null,\n        style,\n      ]}\n    />\n  );\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-android.png\" />\n *     <figcaption>Surface on Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-ios.png\" />\n *     <figcaption>Surface on iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface} elevation={4}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *   },\n * });\n * ```\n */\nconst Surface = ({\n  elevation = 1,\n  children,\n  theme: overridenTheme,\n  style,\n  testID,\n  ...props\n}: Props) => {\n  const theme = useTheme(overridenTheme);\n\n  if (!theme.isV3)\n    return (\n      <MD2Surface {...props} theme={theme} style={style}>\n        {children}\n      </MD2Surface>\n    );\n\n  const { colors } = theme;\n\n  const inputRange = [0, 1, 2, 3, 4, 5];\n\n  const backgroundColor = (() => {\n    if (isAnimatedValue(elevation)) {\n      return elevation.interpolate({\n        inputRange,\n        outputRange: inputRange.map((elevation) => {\n          return colors.elevation?.[`level${elevation as MD3Elevation}`];\n        }),\n      });\n    }\n\n    return colors.elevation?.[`level${elevation}`];\n  })();\n\n  if (Platform.OS === 'web') {\n    return (\n      <Animated.View\n        {...props}\n        testID={testID}\n        style={[\n          { backgroundColor },\n          elevation ? shadow(elevation, theme.isV3) : null,\n          style,\n        ]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  if (Platform.OS === 'android') {\n    const elevationLevel = [0, 3, 6, 9, 12, 15];\n\n    const getElevationAndroid = () => {\n      if (isAnimatedValue(elevation)) {\n        return elevation.interpolate({\n          inputRange,\n          outputRange: elevationLevel,\n        });\n      }\n\n      return elevationLevel[elevation];\n    };\n\n    const { margin, padding, transform, borderRadius } = (StyleSheet.flatten(\n      style\n    ) || {}) as ViewStyle;\n\n    const outerLayerStyles = { margin, padding, transform, borderRadius };\n    const sharedStyle = [{ backgroundColor }, style];\n\n    return (\n      <Animated.View\n        {...props}\n        testID={testID}\n        style={[\n          {\n            backgroundColor,\n            transform,\n          },\n          outerLayerStyles,\n          sharedStyle,\n          {\n            elevation: getElevationAndroid(),\n          },\n        ]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  const iOSShadowOutputRanges = [\n    {\n      shadowOpacity: 0.15,\n      height: [0, 1, 2, 4, 6, 8],\n      shadowRadius: [0, 3, 6, 8, 10, 12],\n    },\n    {\n      shadowOpacity: 0.3,\n      height: [0, 1, 1, 1, 2, 4],\n      shadowRadius: [0, 1, 2, 3, 3, 4],\n    },\n  ];\n\n  const shadowColor = '#000';\n\n  const { position, alignSelf, top, left, right, bottom, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const absoluteStyles = { position, alignSelf, top, right, bottom, left };\n  const sharedStyle = [{ backgroundColor }, restStyle];\n\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 4, 5];\n\n    const getStyleForAnimatedShadowLayer = (layer: 0 | 1) => {\n      return {\n        shadowColor,\n        shadowOpacity: elevation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n          extrapolate: 'clamp',\n        }),\n        shadowOffset: {\n          width: 0,\n          height: elevation.interpolate({\n            inputRange,\n            outputRange: iOSShadowOutputRanges[layer].height,\n          }),\n        },\n        shadowRadius: elevation.interpolate({\n          inputRange,\n          outputRange: iOSShadowOutputRanges[layer].shadowRadius,\n        }),\n      };\n    };\n\n    return (\n      <Animated.View\n        style={[getStyleForAnimatedShadowLayer(0), absoluteStyles]}\n      >\n        <Animated.View style={getStyleForAnimatedShadowLayer(1)}>\n          <Animated.View {...props} testID={testID} style={sharedStyle}>\n            {children}\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n    );\n  }\n\n  const getStyleForShadowLayer = (layer: 0 | 1) => {\n    return {\n      shadowColor,\n      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,\n      shadowOffset: {\n        width: 0,\n        height: iOSShadowOutputRanges[layer].height[elevation],\n      },\n      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation],\n    };\n  };\n\n  return (\n    <Animated.View style={[getStyleForShadowLayer(0), absoluteStyles]}>\n      <Animated.View style={[getStyleForShadowLayer(1)]}>\n        <Animated.View {...props} testID={testID} style={sharedStyle}>\n          {children}\n        </Animated.View>\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nexport default Surface;\n"]}
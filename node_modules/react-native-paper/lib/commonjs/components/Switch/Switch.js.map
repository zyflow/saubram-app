{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","value","disabled","onValueChange","color","theme","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AAEA;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,2BAAcC,iBAAd,GACZD,2BAAcC,iBAAd,CAAgCC,kBADpB,GAEZC,SAFJ;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,QAOF;AAAA,MAPG;AACdC,IAAAA,KADc;AAEdC,IAAAA,QAFc;AAGdC,IAAAA,aAHc;AAIdC,IAAAA,KAJc;AAKdC,IAAAA,KALc;AAMd,OAAGC;AANW,GAOH;AACX,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA;AAA7B,MAAgD,2BAAe;AACnEJ,IAAAA,KADmE;AAEnEH,IAAAA,QAFmE;AAGnED,IAAAA,KAHmE;AAInEG,IAAAA;AAJmE,GAAf,CAAtD;AAOA,QAAMM,KAAK,GACTf,OAAO,IAAIA,OAAO,CAACgB,KAAR,KAAkB,CAA7B,IAAkChB,OAAO,CAACiB,KAAR,IAAiB,EAAnD,GACI;AACEJ,IAAAA,WADF;AAEEC,IAAAA;AAFF,GADJ,GAKII,sBAASC,EAAT,KAAgB,KAAhB,GACA;AACEC,IAAAA,gBAAgB,EAAEP,WADpB;AAEEQ,IAAAA,UAAU,EAAEP,cAFd;AAGEQ,IAAAA,gBAAgB,EAAEV;AAHpB,GADA,GAMA;AACES,IAAAA,UAAU,EAAEP,cADd;AAEES,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAEX,WADI;AAEVY,MAAAA,KAAK,EAAEZ;AAFG;AAFd,GAZN;AAoBA,sBACE,oBAAC,mBAAD;AACE,IAAA,KAAK,EAAEP,KADT;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,aAAa,EAAEA,QAAQ,GAAGH,SAAH,GAAeI;AAHxC,KAIMO,KAJN,EAKMJ,IALN,EADF;AASD,CA5CD;;eA8Ce,wBAAUN,MAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getSwitchColor } from './utils';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const { checkedColor, onTintColor, thumbTintColor } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color,\n  });\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: onTintColor,\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]}
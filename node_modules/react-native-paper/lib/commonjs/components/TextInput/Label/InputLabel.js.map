{"version":3,"sources":["InputLabel.tsx"],"names":["InputLabel","props","isV3","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","testID","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","textColor","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","top","color","md3TextLine","create","zIndex","lineHeight","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { useTheme } from '../../../core/theming';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { isV3 } = useTheme();\n  const { parentState, labelBackground } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n    testID,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  const textColor = error && errorColor ? errorColor : placeholderColor;\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        variant=\"bodySmall\"\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n          isV3 && styles.md3TextLine,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-active`}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        variant={parentState.focused ? 'bodyLarge' : 'bodySmall'}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: textColor,\n            opacity: placeholderOpacity,\n          },\n          isV3 && styles.md3TextLine,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-inactive`}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n  md3TextLine: {\n    lineHeight: undefined,\n  },\n});\n\nexport default InputLabel;\n"]}
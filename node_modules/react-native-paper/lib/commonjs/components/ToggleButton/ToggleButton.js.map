{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","white","black","alpha","rgb","string","e","onValueChange","selected","styles","content","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAG,QAWR;AAAA,MAXS;AACpBC,IAAAA,IADoB;AAEpBC,IAAAA,IAFoB;AAGpBC,IAAAA,KAHoB;AAIpBC,IAAAA,kBAJoB;AAKpBC,IAAAA,QALoB;AAMpBC,IAAAA,KANoB;AAOpBC,IAAAA,KAPoB;AAQpBC,IAAAA,MARoB;AASpBC,IAAAA,OAToB;AAUpB,OAAGC;AAViB,GAWT;AACX,QAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;AAEA,sBACE,oBAAC,2CAAD,CAA0B,QAA1B,QACIC,OAAD,IAAuE;AACtE,UAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACN,KAAR,KAAkBA,KAA9B,IAAwCC,MAAM,KAAK,SADrD;AAGA,UAAMO,eAAe,GAAG,iCAAqB;AAAEZ,MAAAA,KAAF;AAASW,MAAAA;AAAT,KAArB,CAAxB;AACA,UAAME,WAAW,GAAGb,KAAK,CAACc,IAAN,GAChBd,KAAK,CAACe,MAAN,CAAaC,OADG,GAEhB,oBAAMhB,KAAK,CAACiB,IAAN,GAAaC,aAAb,GAAqBC,aAA3B,EACGC,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EAFJ;AAOA,wBACE,oBAAC,mBAAD;AACE,MAAA,UAAU,EAAE,KADd;AAEE,MAAA,IAAI,EAAExB,IAFR;AAGE,MAAA,OAAO,EAAGyB,CAAD,IAAwC;AAC/C,YAAIjB,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACiB,CAAD,CAAP;AACD;;AAED,YAAIb,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACc,aAAR,CAAsB,CAACb,OAAD,GAAWP,KAAX,GAAmB,IAAzC;AACD;AACF,OAXH;AAYE,MAAA,IAAI,EAAEL,IAZR;AAaE,MAAA,kBAAkB,EAAEE,kBAbtB;AAcE,MAAA,kBAAkB,EAAE;AAAEC,QAAAA,QAAF;AAAYuB,QAAAA,QAAQ,EAAEd;AAAtB,OAdtB;AAeE,MAAA,QAAQ,EAAET,QAfZ;AAgBE,MAAA,KAAK,EAAE,CACLwB,MAAM,CAACC,OADF,EAEL;AACEf,QAAAA,eADF;AAEEJ,QAAAA,YAFF;AAGEK,QAAAA;AAHF,OAFK,EAOLV,KAPK;AAhBT,OAyBMI,IAzBN,EADF;AA6BD,GA1CH,CADF;AA8CD,CA5DD;;AA8DA,MAAMmB,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BF,EAAAA,OAAO,EAAE;AACPG,IAAAA,KAAK,EAAE,EADA;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,MAAM,EAAE;AAHD;AADsB,CAAlB,CAAf;;eAQe,wBAAUnC,YAAV,C,EAEf;;;;AACA,MAAMoC,qBAAqB,GAAG,wBAAUpC,YAAV,CAA9B,C,CACA","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { IconSource } from '../Icon';\nimport type { Theme } from '../../types';\nimport { getToggleButtonColor } from './utils';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        const backgroundColor = getToggleButtonColor({ theme, checked });\n        const borderColor = theme.isV3\n          ? theme.colors.outline\n          : color(theme.dark ? white : black)\n              .alpha(0.29)\n              .rgb()\n              .string();\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor,\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]}
{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","onPress","calculatedRippleColor","calculatedUnderlayColor","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","styles","overflowHidden","React","Children","only","StyleSheet","create","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AAEA;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAe,GAAG,QAUX;AAAA,MAVY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvB,OAAGC;AAToB,GAUZ;AACX,QAAMN,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACC,OAAvC;AACA,QAAM;AAAEC,IAAAA,qBAAF;AAAyBC,IAAAA;AAAzB,MACJ,qCAAyB;AACvBJ,IAAAA,KADuB;AAEvBH,IAAAA,WAFuB;AAGvBC,IAAAA;AAHuB,GAAzB,CADF,CAFW,CASX;AACA;;AACA,QAAMO,aAAa,GACjBC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoBlB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACkB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,oCAAD,eACMR,IADN;AAEE,MAAA,QAAQ,EAAEN,QAFZ;AAGE,MAAA,aAAa,EAAEU,aAHjB;AAIE,MAAA,UAAU,EACRZ,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIiB,qCAAwBC,MAAxB,CAA+BR,qBAA/B,EAAsDT,UAAtD;AAPR,qBAUE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIkB,MAAM,CAACC,cAAtB,EAAsCrB,KAAtC;AAAb,OACGsB,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBjB,QAApB,CADH,CAVF,CADF;AAgBD;;AAED,sBACE,oBAAC,+BAAD,eACME,IADN;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIkB,MAAM,CAACC,cAAtB,EAAsCrB,KAAtC,CAHT;AAIE,IAAA,aAAa,EAAEY;AAJjB,MAMGU,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBjB,QAApB,CANH,CADF;AAUD,CAvDD;;AAyDAR,eAAe,CAACkB,SAAhB,GACEH,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBnB,wBADnD;;AAGA,MAAMuB,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,cAAc,EAAE;AACdM,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;;eAMe,wBAAU5B,eAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport { getTouchableRippleColors } from './utils';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const disabled = disabledProp || !rest.onPress;\n  const { calculatedRippleColor, calculatedUnderlayColor } =\n    getTouchableRippleColors({\n      theme,\n      rippleColor,\n      underlayColor,\n    });\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={calculatedUnderlayColor}\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
{"version":3,"sources":["Text.tsx"],"names":["Text","ref","style","variant","theme","initialTheme","rest","root","React","useRef","writingDirection","I18nManager","isRTL","useImperativeHandle","setNativeProps","args","current","isV3","stylesByVariant","Object","keys","MD3TypescaleKey","reduce","acc","key","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","typescale","Platform","OS","color","colors","onSurface","styleForVariant","styles","text","fonts","regular","StyleSheet","create","textAlign","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, ThemeProp } from '../../types';\n\nexport type Props = React.ComponentProps<typeof NativeText> & {\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  children: React.ReactNode;\n  theme?: ThemeProp;\n  style?: StyleProp<TextStyle>;\n};\n\n// @component-group Typography\n\n/**\n * Typography component showing styles complied with passed `variant` prop and supported by the type system.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/typography.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <Text variant=\"displayLarge\">Display Large</Text>\n *     <Text variant=\"displayMedium\">Display Medium</Text>\n *     <Text variant=\"displaySmall\">Display small</Text>\n *\n *     <Text variant=\"headlineLarge\">Headline Large</Text>\n *     <Text variant=\"headlineMedium\">Headline Medium</Text>\n *     <Text variant=\"headlineSmall\">Headline Small</Text>\n *\n *     <Text variant=\"titleLarge\">Title Large</Text>\n *     <Text variant=\"titleMedium\">Title Medium</Text>\n *     <Text variant=\"titleSmall\">Title Small</Text>\n *\n *     <Text variant=\"bodyLarge\">Body Large</Text>\n *     <Text variant=\"bodyMedium\">Body Medium</Text>\n *     <Text variant=\"bodySmall\">Body Small</Text>\n *\n *     <Text variant=\"labelLarge\">Label Large</Text>\n *     <Text variant=\"labelMedium\">Label Medium</Text>\n *     <Text variant=\"labelSmall\">Label Small</Text>\n *  </>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\n\nconst Text: React.ForwardRefRenderFunction<{}, Props> = (\n  { style, variant, theme: initialTheme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n  // FIXME: destructure it in TS 4.6+\n  const theme = useTheme(initialTheme);\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.typescale[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            ...(Platform.OS === 'android' && { fontFamily }),\n            fontSize,\n            fontWeight,\n            lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <NativeText\n        ref={root}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n        {...rest}\n      />\n    );\n  } else {\n    return (\n      <NativeText\n        {...rest}\n        ref={root}\n        style={[\n          {\n            ...(!theme.isV3 && theme.fonts?.regular),\n            color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text,\n          },\n          styles.text,\n          style,\n        ]}\n      />\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default React.forwardRef(Text);\n"]}
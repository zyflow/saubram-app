{"version":3,"sources":["Text.tsx"],"names":["Text","ref","style","theme","overrideTheme","rest","root","React","useRef","useImperativeHandle","setNativeProps","args","current","isV3","fonts","regular","color","colors","onSurface","text","styles","StyleSheet","create","textAlign","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;;;;;;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAA+C,GAAG,OAEtDC,GAFsD,KAGnD;AAAA;;AAAA,MAFH;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAK,EAAEC,aAAhB;AAA+B,OAAGC;AAAlC,GAEG;AACH,QAAMC,IAAI,GAAGC,KAAK,CAACC,MAAN,CAAgC,IAAhC,CAAb;AACA,QAAML,KAAK,GAAG,uBAASC,aAAT,CAAd;AAEAG,EAAAA,KAAK,CAACE,mBAAN,CAA0BR,GAA1B,EAA+B,OAAO;AACpCS,IAAAA,cAAc,EAAGC,IAAD;AAAA;;AAAA,8BAAkBL,IAAI,CAACM,OAAvB,kDAAkB,cAAcF,cAAd,CAA6BC,IAA7B,CAAlB;AAAA;AADoB,GAAP,CAA/B;AAIA,sBACE,oBAAC,iBAAD,eACMN,IADN;AAEE,IAAA,GAAG,EAAEC,IAFP;AAGE,IAAA,KAAK,EAAE,CACL,EACE,IAAI,CAACH,KAAK,CAACU,IAAP,qBAAeV,KAAK,CAACW,KAArB,iDAAe,aAAaC,OAA5B,CAAJ,CADF;AAEEC,MAAAA,KAAK,EAAEb,KAAK,CAACU,IAAN,oBAAaV,KAAK,CAACc,MAAnB,kDAAa,cAAcC,SAA3B,GAAuCf,KAAK,CAACc,MAAN,CAAaE;AAF7D,KADK,EAKLC,MAAM,CAACD,IALF,EAMLjB,KANK;AAHT,KADF;AAcD,CAzBD;;AA2BA,MAAMkB,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,IAAI,EAAE;AACJI,IAAAA,SAAS,EAAE;AADP;AADyB,CAAlB,CAAf;;4BAMehB,KAAK,CAACiB,UAAN,CAAiBxB,IAAjB,C","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport type { Theme } from '../../../types';\nimport { useTheme } from '../../../core/theming';\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nconst Text: React.ForwardRefRenderFunction<{}, Props> = (\n  { style, theme: overrideTheme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n  const theme = useTheme(overrideTheme);\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  return (\n    <NativeText\n      {...rest}\n      ref={root}\n      style={[\n        {\n          ...(!theme.isV3 && theme.fonts?.regular),\n          color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text,\n        },\n        styles.text,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default React.forwardRef(Text);\n"]}
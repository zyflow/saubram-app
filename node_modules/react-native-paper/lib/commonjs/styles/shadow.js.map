{"version":3,"sources":["shadow.tsx"],"names":["SHADOW_COLOR","MD2Colors","black","SHADOW_OPACITY","MD3_SHADOW_OPACITY","MD3_SHADOW_COLOR","MD3Colors","primary0","shadow","elevation","isV3","v3Shadow","v2Shadow","Animated","Value","inputRange","shadowColor","shadowOffset","width","height","interpolate","outputRange","shadowOpacity","extrapolate","shadowRadius","radius","shadowHeight"],"mappings":"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","sourcesContent":["import * as MD2Colors from './themes/v2/colors';\nimport { Animated } from 'react-native';\nimport { MD3Colors } from './themes/v3/tokens';\n\nconst SHADOW_COLOR = MD2Colors.black;\nconst SHADOW_OPACITY = 0.24;\nconst MD3_SHADOW_OPACITY = 0.3;\nconst MD3_SHADOW_COLOR = MD3Colors.primary0;\n\nexport default function shadow(\n  elevation: number | Animated.Value = 0,\n  isV3 = false\n) {\n  return isV3 ? v3Shadow(elevation) : v2Shadow(elevation);\n}\n\nfunction v2Shadow(elevation: number | Animated.Value = 0) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange,\n          outputRange: [0, 0.5, 0.75, 2, 7, 23],\n        }),\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, SHADOW_OPACITY],\n        extrapolate: 'clamp',\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange,\n        outputRange: [0, 0.75, 1.5, 3, 8, 24],\n      }),\n    };\n  } else {\n    if (elevation === 0) {\n      return {};\n    }\n\n    let height, radius;\n    switch (elevation) {\n      case 1:\n        height = 0.5;\n        radius = 0.75;\n        break;\n      case 2:\n        height = 0.75;\n        radius = 1.5;\n        break;\n      default:\n        height = elevation - 1;\n        radius = elevation;\n    }\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: 0,\n        height,\n      },\n      shadowOpacity: SHADOW_OPACITY,\n      shadowRadius: radius,\n    };\n  }\n}\n\nfunction v3Shadow(elevation: number | Animated.Value = 0) {\n  const inputRange = [0, 1, 2, 3, 4, 5];\n  const shadowHeight = [0, 1, 2, 4, 6, 8];\n  const shadowRadius = [0, 3, 6, 8, 10, 12];\n\n  if (elevation instanceof Animated.Value) {\n    return {\n      shadowColor: MD3_SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange,\n          outputRange: shadowHeight,\n        }),\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, MD3_SHADOW_OPACITY],\n        extrapolate: 'clamp',\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange,\n        outputRange: shadowRadius,\n      }),\n    };\n  } else {\n    return {\n      shadowColor: MD3_SHADOW_COLOR,\n      shadowOpacity: elevation ? MD3_SHADOW_OPACITY : 0,\n      shadowOffset: {\n        width: 0,\n        height: shadowHeight[elevation],\n      },\n      shadowRadius: shadowRadius[elevation],\n    };\n  }\n}\n"]}
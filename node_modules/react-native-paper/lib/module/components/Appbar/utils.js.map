{"version":3,"sources":["utils.ts"],"names":["React","color","StyleSheet","AppbarContent","AppbarAction","AppbarBackAction","overlay","black","white","getAppbarColor","theme","elevation","customBackground","elevated","isV3","dark","isDarkTheme","mode","colors","isAdaptiveMode","surface","primary","mix","rgb","string","DEFAULT_APPBAR_HEIGHT","MD3_DEFAULT_APPBAR_HEIGHT","modeAppbarHeight","small","medium","large","modeTextVariant","renderAppbarContent","children","isDark","shouldCenterContent","renderOnly","renderExcept","Children","toArray","filter","child","includes","type","map","i","isValidElement","props","undefined","style","styles","v3Spacing","v2Spacing","centerAlignedContent","cloneElement","create","alignItems","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport { StyleSheet } from 'react-native';\nimport type { ColorValue, StyleProp, ViewStyle } from 'react-native';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport overlay from '../../styles/overlay';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\nexport type AppbarModes = 'small' | 'medium' | 'large' | 'center-aligned';\n\nexport const getAppbarColor = (\n  theme: Theme,\n  elevation: number,\n  customBackground?: ColorValue,\n  elevated?: boolean\n) => {\n  const { isV3, dark: isDarkTheme, mode, colors } = theme;\n  const isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors?.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return color(colors.surface)\n      .mix(color(colors.primary), 0.08)\n      .rgb()\n      .string();\n  }\n\n  return colors.surface;\n};\n\ntype RenderAppbarContentProps = {\n  children: React.ReactNode;\n  isDark: boolean;\n  shouldCenterContent?: boolean;\n  isV3: boolean;\n  renderOnly?: React.ReactNode[];\n  renderExcept?: React.ReactNode[];\n  mode?: AppbarModes;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\nconst MD3_DEFAULT_APPBAR_HEIGHT = 64;\n\nexport const modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT,\n};\n\nexport const modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge',\n};\n\nexport const renderAppbarContent = ({\n  children,\n  isDark,\n  shouldCenterContent = false,\n  isV3,\n  renderOnly,\n  renderExcept,\n  mode = 'small',\n}: RenderAppbarContentProps) => {\n  return (\n    React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        renderExcept ? !renderExcept.includes(child.type) : child\n      )\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      .filter((child) => (renderOnly ? renderOnly.includes(child.type) : child))\n      .map((child, i) => {\n        if (\n          !React.isValidElement(child) ||\n          ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n            // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n            child.type\n          )\n        ) {\n          return child;\n        }\n\n        const props: {\n          color?: string;\n          style?: StyleProp<ViewStyle>;\n          mode?: AppbarModes;\n        } = {\n          color: isV3\n            ? undefined\n            : typeof child.props.color !== 'undefined'\n            ? child.props.color\n            : isDark\n            ? white\n            : black,\n        };\n\n        if (child.type === AppbarContent) {\n          props.mode = mode;\n          props.style = [\n            isV3\n              ? i === 0 && !shouldCenterContent && styles.v3Spacing\n              : i !== 0 && styles.v2Spacing,\n            shouldCenterContent && styles.centerAlignedContent,\n            child.props.style,\n          ];\n        }\n        return React.cloneElement(child, props);\n      })\n  );\n};\n\nconst styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center',\n  },\n  v2Spacing: {\n    marginLeft: 8,\n  },\n  v3Spacing: {\n    marginLeft: 12,\n  },\n});\n"]}
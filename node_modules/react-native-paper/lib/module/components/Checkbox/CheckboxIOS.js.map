{"version":3,"sources":["CheckboxIOS.tsx"],"names":["React","StyleSheet","View","MaterialCommunityIcon","TouchableRipple","withTheme","getSelectionControlIOSColor","CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","rippleColor","customColor","color","icon","styles","container","opacity","displayName","create","borderRadius","padding","CheckboxIOSWithTheme"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,SAASC,2BAAT,QAA4C,SAA5C;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,QAOP;AAAA,MAPQ;AACnBC,IAAAA,MADmB;AAEnBC,IAAAA,QAFmB;AAGnBC,IAAAA,OAHmB;AAInBC,IAAAA,KAJmB;AAKnBC,IAAAA,MALmB;AAMnB,OAAGC;AANgB,GAOR;AACX,QAAMC,OAAO,GAAGN,MAAM,KAAK,SAA3B;AACA,QAAMO,aAAa,GAAGP,MAAM,KAAK,eAAjC;AAEA,QAAM;AAAEQ,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAgCX,2BAA2B,CAAC;AAChEK,IAAAA,KADgE;AAEhEF,IAAAA,QAFgE;AAGhES,IAAAA,WAAW,EAAEL,IAAI,CAACM;AAH8C,GAAD,CAAjE;AAMA,QAAMC,IAAI,GAAGL,aAAa,GAAG,OAAH,GAAa,OAAvC;AAEA,sBACE,oBAAC,eAAD,eACMF,IADN;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,WAAW,EAAEI,WAHf;AAIE,IAAA,OAAO,EAAEP,OAJX;AAKE,IAAA,QAAQ,EAAED,QALZ;AAME,IAAA,iBAAiB,EAAC,UANpB;AAOE,IAAA,kBAAkB,EAAE;AAAEA,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAPtB;AAQE,IAAA,uBAAuB,EAAC,QAR1B;AASE,IAAA,KAAK,EAAEO,MAAM,CAACC,SAThB;AAUE,IAAA,MAAM,EAAEV;AAVV,mBAYE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEW,MAAAA,OAAO,EAAER,aAAa,IAAID,OAAjB,GAA2B,CAA3B,GAA+B;AAA1C;AAAb,kBACE,oBAAC,qBAAD;AACE,IAAA,gBAAgB,EAAE,KADpB;AAEE,IAAA,IAAI,EAAEM,IAFR;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,KAAK,EAAEJ,YAJT;AAKE,IAAA,SAAS,EAAC;AALZ,IADF,CAZF,CADF;AAwBD,CA3CD;;AA6CAT,WAAW,CAACiB,WAAZ,GAA0B,cAA1B;AAEA,MAAMH,MAAM,GAAGpB,UAAU,CAACwB,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;AAOA,eAAetB,SAAS,CAACE,WAAD,CAAxB,C,CAEA;;AACA,MAAMqB,oBAAoB,GAAGvB,SAAS,CAACE,WAAD,CAAtC,C,CACA;;AACA,SAASqB,oBAAoB,IAAIrB,WAAjC","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getSelectionControlIOSColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color,\n  });\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]}
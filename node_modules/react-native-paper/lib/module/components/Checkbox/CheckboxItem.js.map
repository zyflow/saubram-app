{"version":3,"sources":["CheckboxItem.tsx"],"names":["React","StyleSheet","View","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","accessibilityLabel","disabled","labelVariant","props","checkboxProps","isLeading","checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","checked","styles","container","font","displayName","CheckboxItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { MD3TypescaleKey, Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]}
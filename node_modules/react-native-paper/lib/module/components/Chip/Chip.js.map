{"version":3,"sources":["Chip.tsx"],"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","Icon","MaterialCommunityIcon","Surface","Text","TouchableRipple","withTheme","white","getChipColors","Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","showSelectedOverlay","ellipsizeMode","compact","elevated","rest","isV3","current","elevation","useRef","Value","isOutlined","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","customBackgroundColor","borderRadius","flatten","borderColor","textColor","iconColor","underlayColor","selectedBackgroundColor","accessibilityState","elevationStyle","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","styles","container","md3OutlineContainer","md3FlatContainer","touchable","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","colors","primary","text","color","fonts","regular","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { EllipsizeProp, Theme } from '../../types';\nimport { getChipColors } from './helpers';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          isV3 &&\n            (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n          !theme.isV3 && {\n            elevation: elevationStyle,\n          },\n          {\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                color: textColor,\n                ...(!isV3 && {\n                  ...theme.fonts.regular,\n                }),\n              },\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]}
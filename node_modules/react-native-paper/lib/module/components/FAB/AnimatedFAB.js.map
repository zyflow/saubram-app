{"version":3,"sources":["AnimatedFAB.tsx"],"names":["React","color","Animated","View","StyleSheet","Easing","ScrollView","Text","Platform","I18nManager","Surface","Icon","TouchableRipple","withTheme","AnimatedText","getCombinedStyles","getFABColors","SIZE","SCALE","AnimatedFAB","icon","label","accessibilityLabel","accessibilityState","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","isV3","testID","animateFrom","extended","iconMode","variant","rest","isIOS","OS","isAnimatedFromRight","isIconStatic","isRTL","current","visibility","useRef","Value","animFAB","animation","scale","textWidth","setTextWidth","useState","textHeight","setTextHeight","borderRadius","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","foregroundColor","rippleColor","alpha","rgb","string","extendedWidth","distance","easing","linear","onTextLayout","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","textStyle","typescale","labelLarge","fonts","medium","md2Elevation","md3Elevation","opacity","transform","elevation","styles","container","scaleY","interpolate","inputRange","outputRange","standard","absoluteFill","shadowWrapper","shadow","innerWrapper","iconWrapper","undefined","minWidth","top","translateX","uppercaseLabel","textPlaceholderContainer","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,IAFF,EAIEC,UAJF,EAMEC,MANF,EAOEC,UAPF,EAQEC,IARF,EASEC,QATF,EAUEC,WAVF,QAWO,cAXP;AAYA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAGA,SAASC,SAAT,QAA0B,oBAA1B;AAMA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,SAAhD;AAyEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,KAAK,GAAG,GAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,QAmBP;AAAA,MAnBQ;AACnBC,IAAAA,IADmB;AAEnBC,IAAAA,KAFmB;AAGnBC,IAAAA,kBAAkB,GAAGD,KAHF;AAInBE,IAAAA,kBAJmB;AAKnBtB,IAAAA,KAAK,EAAEuB,WALY;AAMnBC,IAAAA,QANmB;AAOnBC,IAAAA,OAPmB;AAQnBC,IAAAA,WARmB;AASnBC,IAAAA,KATmB;AAUnBC,IAAAA,KAVmB;AAWnBC,IAAAA,OAAO,GAAG,IAXS;AAYnBC,IAAAA,SAAS,GAAG,CAACH,KAAK,CAACI,IAZA;AAanBC,IAAAA,MAbmB;AAcnBC,IAAAA,WAAW,GAAG,OAdK;AAenBC,IAAAA,QAAQ,GAAG,KAfQ;AAgBnBC,IAAAA,QAAQ,GAAG,SAhBQ;AAiBnBC,IAAAA,OAAO,GAAG,SAjBS;AAkBnB,OAAGC;AAlBgB,GAmBR;AACX,QAAMC,KAAK,GAAG/B,QAAQ,CAACgC,EAAT,KAAgB,KAA9B;AACA,QAAMC,mBAAmB,GAAGP,WAAW,KAAK,OAA5C;AACA,QAAMQ,YAAY,GAAGN,QAAQ,KAAK,QAAlC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAYlC,WAAlB;AACA,QAAM;AAAEmC,IAAAA,OAAO,EAAEC;AAAX,MAA0B7C,KAAK,CAAC8C,MAAN,CAC9B,IAAI5C,QAAQ,CAAC6C,KAAb,CAAmBjB,OAAO,GAAG,CAAH,GAAO,CAAjC,CAD8B,CAAhC;AAGA,QAAM;AAAEc,IAAAA,OAAO,EAAEI;AAAX,MAAuBhD,KAAK,CAAC8C,MAAN,CAC3B,IAAI5C,QAAQ,CAAC6C,KAAb,CAAmB,CAAnB,CAD2B,CAA7B;AAGA,QAAM;AAAEf,IAAAA,IAAF;AAAQiB,IAAAA;AAAR,MAAsBrB,KAA5B;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAYD,SAAlB;AAEA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BpD,KAAK,CAACqD,QAAN,CAAuB,CAAvB,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvD,KAAK,CAACqD,QAAN,CAAuB,CAAvB,CAApC;AAEA,QAAMG,YAAY,GAAGvC,IAAI,IAAIe,IAAI,GAAG,GAAH,GAAS,CAAjB,CAAzB;AAEAhC,EAAAA,KAAK,CAACyD,SAAN,CAAgB,MAAM;AACpB,QAAI3B,OAAJ,EAAa;AACX5B,MAAAA,QAAQ,CAACwD,MAAT,CAAgBb,UAAhB,EAA4B;AAC1Bc,QAAAA,OAAO,EAAE,CADiB;AAE1BC,QAAAA,QAAQ,EAAE,MAAMV,KAFU;AAG1BW,QAAAA,eAAe,EAAE;AAHS,OAA5B,EAIGC,KAJH;AAKD,KAND,MAMO;AACL5D,MAAAA,QAAQ,CAACwD,MAAT,CAAgBb,UAAhB,EAA4B;AAC1Bc,QAAAA,OAAO,EAAE,CADiB;AAE1BC,QAAAA,QAAQ,EAAE,MAAMV,KAFU;AAG1BW,QAAAA,eAAe,EAAE;AAHS,OAA5B,EAIGC,KAJH;AAKD;AACF,GAdD,EAcG,CAAChC,OAAD,EAAUoB,KAAV,EAAiBL,UAAjB,CAdH;AAgBA,QAAM;AAAEkB,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAuChD,YAAY,CAAC;AACxDY,IAAAA,KADwD;AAExDS,IAAAA,OAFwD;AAGxDZ,IAAAA,QAHwD;AAIxDD,IAAAA,WAJwD;AAKxDK,IAAAA;AALwD,GAAD,CAAzD;AAQA,QAAMoC,WAAW,GAAGhE,KAAK,CAAC+D,eAAD,CAAL,CAAuBE,KAAvB,CAA6B,IAA7B,EAAmCC,GAAnC,GAAyCC,MAAzC,EAApB;AAEA,QAAMC,aAAa,GAAGlB,SAAS,GAAGlC,IAAZ,GAAmBuC,YAAzC;AAEA,QAAMc,QAAQ,GAAG7B,mBAAmB,GAChC,CAACU,SAAD,GAAaK,YADmB,GAEhCL,SAAS,GAAGK,YAFhB;AAIAxD,EAAAA,KAAK,CAACyD,SAAN,CAAgB,MAAM;AACpBvD,IAAAA,QAAQ,CAACwD,MAAT,CAAgBV,OAAhB,EAAyB;AACvBW,MAAAA,OAAO,EAAE,CAACxB,QAAD,GAAY,CAAZ,GAAgBmC,QADF;AAEvBV,MAAAA,QAAQ,EAAE,MAAMV,KAFO;AAGvBW,MAAAA,eAAe,EAAE,IAHM;AAIvBU,MAAAA,MAAM,EAAElE,MAAM,CAACmE;AAJQ,KAAzB,EAKGV,KALH;AAMD,GAPD,EAOG,CAACd,OAAD,EAAUE,KAAV,EAAiBoB,QAAjB,EAA2BnC,QAA3B,CAPH;;AASA,QAAMsC,YAAY,GAAG,SAE4B;AAAA,QAF3B;AACpBC,MAAAA;AADoB,KAE2B;AAC/C,UAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUH,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBC,KAA/B,CAArB;AACA,UAAMC,aAAa,GAAGJ,IAAI,CAACC,IAAL,CAAUH,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBG,MAA/B,CAAtB;;AAEA,QAAIN,YAAY,KAAKxB,SAAjB,IAA8B6B,aAAa,KAAK1B,UAApD,EAAgE;AAC9DC,MAAAA,aAAa,CAACyB,aAAD,CAAb;;AAEA,UAAIzC,KAAJ,EAAW;AACT,eAAOa,YAAY,CAACuB,YAAY,GAAG,EAAhB,CAAnB;AACD;;AAEDvB,MAAAA,YAAY,CAACuB,YAAD,CAAZ;AACD;AACF,GAfD;;AAiBA,QAAMO,gBAAgB,GAAQC,KAAL,IAAyB;AAChD,QAAI1C,mBAAJ,EAAyB;AACvB,aAAO0C,KAAP;AACD;;AAED,WAAOA,KAAK,CAACC,OAAN,EAAP;AACD,GAND;;AAQA,QAAMC,cAAc,GAAGtE,iBAAiB,CAAC;AACvC0B,IAAAA,mBADuC;AAEvCC,IAAAA,YAFuC;AAGvC4B,IAAAA,QAHuC;AAIvCtB,IAAAA;AAJuC,GAAD,CAAxC;AAOA,QAAMsC,SAAS,GAAG;AAChBrF,IAAAA,KAAK,EAAE+D,eADS;AAEhB,QAAIhC,IAAI,GAAGJ,KAAK,CAAC2D,SAAN,CAAgBC,UAAnB,GAAgC5D,KAAK,CAAC6D,KAAN,CAAYC,MAApD;AAFgB,GAAlB;AAKA,QAAMC,YAAY,GAAGlE,QAAQ,IAAI,CAACc,KAAb,GAAqB,CAArB,GAAyB,CAA9C;AACA,QAAMqD,YAAY,GAAGnE,QAAQ,IAAI,CAACc,KAAb,GAAqB,CAArB,GAAyB,CAA9C;AAEA,sBACE,oBAAC,OAAD,eACMD,IADN;AAEE,IAAA,KAAK,EACH,CACE;AACEuD,MAAAA,OAAO,EAAEhD,UADX;AAEEiD,MAAAA,SAAS,EAAE,CACT;AACE5C,QAAAA,KAAK,EAAEL;AADT,OADS,CAFb;AAOEW,MAAAA;AAPF,KADF,EAUE,CAACxB,IAAD,IAAS;AACP+D,MAAAA,SAAS,EAAEJ;AADJ,KAVX,EAaEK,MAAM,CAACC,SAbT,EAcEpE,KAdF;AAHJ,KAoBOG,IAAI,IAAI;AAAE+D,IAAAA,SAAS,EAAEH;AAAb,GApBf,gBAsBE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL,CAAC5D,IAAD,IAAS;AACP8D,MAAAA,SAAS,EAAE,CACT;AACEI,QAAAA,MAAM,EAAElD,OAAO,CAACmD,WAAR,CAAoB;AAC1BC,UAAAA,UAAU,EAAElB,gBAAgB,CAAC,CAACZ,QAAD,EAAW,CAAX,CAAD,CADF;AAE1B+B,UAAAA,WAAW,EAAEnB,gBAAgB,CAAC,CAAChE,KAAD,EAAQ,CAAR,CAAD;AAFH,SAApB;AADV,OADS;AADJ,KADJ,EAWL8E,MAAM,CAACM,QAXF,EAYL;AAAE9C,MAAAA;AAAF,KAZK;AADT,kBAgBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACpD,UAAU,CAACmG,YAAZ,EAA0BP,MAAM,CAACQ,aAAjC;AAAb,kBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CACLpG,UAAU,CAACmG,YADN,EAEL9E,QAAQ,GAAGuE,MAAM,CAACvE,QAAV,GAAqBuE,MAAM,CAACS,MAF/B,EAGL;AACE1B,MAAAA,KAAK,EAAEV,aADT;AAEEwB,MAAAA,OAAO,EAAE7C,OAAO,CAACmD,WAAR,CAAoB;AAC3BC,QAAAA,UAAU,EAAElB,gBAAgB,CAAC,CAACZ,QAAD,EAAW,MAAMA,QAAjB,EAA2B,CAA3B,CAAD,CADD;AAE3B+B,QAAAA,WAAW,EAAEnB,gBAAgB,CAAC,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAD;AAFF,OAApB,CAFX;AAME1B,MAAAA;AANF,KAHK;AAFT,IADF,eAgBE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CACLpD,UAAU,CAACmG,YADN,EAEL9E,QAAQ,GAAGuE,MAAM,CAACvE,QAAV,GAAqBuE,MAAM,CAACS,MAF/B,EAGL;AACEZ,MAAAA,OAAO,EAAE7C,OAAO,CAACmD,WAAR,CAAoB;AAC3BC,QAAAA,UAAU,EAAElB,gBAAgB,CAAC,CAACZ,QAAD,EAAW,MAAMA,QAAjB,EAA2B,CAA3B,CAAD,CADD;AAE3B+B,QAAAA,WAAW,EAAEnB,gBAAgB,CAAC,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAD;AAFF,OAApB,CADX;AAKEH,MAAAA,KAAK,EAAE9D,IALT;AAMEuC,MAAAA,YAAY,EAAER,OAAO,CAACmD,WAAR,CAAoB;AAChCC,QAAAA,UAAU,EAAElB,gBAAgB,CAAC,CAACZ,QAAD,EAAW,CAAX,CAAD,CADI;AAEhC+B,QAAAA,WAAW,EAAEnB,gBAAgB,CAAC,CAC5BjE,IAAI,IAAIoD,aAAa,GAAGpD,IAApB,CADwB,EAE5BuC,YAF4B,CAAD;AAFG,OAApB;AANhB,KAHK,EAiBL6B,cAAc,CAACkB,YAjBV;AAFT,IAhBF,CAhBF,eAuDE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,UADhB;AAEE,IAAA,KAAK,EAAE,CAACP,MAAM,CAACU,YAAR,EAAsB;AAAElD,MAAAA;AAAF,KAAtB;AAFT,kBAIE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLwC,MAAM,CAACM,QADF,EAEL;AACEvB,MAAAA,KAAK,EAAEV,aADT;AAEEN,MAAAA,eAFF;AAGEP,MAAAA;AAHF,KAFK,EAOL6B,cAAc,CAACqB,YAPV;AADT,kBAWE,oBAAC,eAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,OAAO,EAAEhF,OAFX;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,WAAW,EAAEsC,WAJf;AAKE,IAAA,QAAQ,EAAExC,QALZ;AAME,IAAA,kBAAkB,EAAEH,kBANtB;AAOE,IAAA,iBAAiB,EAAC,QAPpB;AAQE,IAAA,kBAAkB,EAAE,EAAE,GAAGC,kBAAL;AAAyBE,MAAAA;AAAzB,KARtB;AASE,IAAA,MAAM,EAAEQ,MATV;AAUE,IAAA,KAAK,EAAE;AAAEuB,MAAAA;AAAF;AAVT,kBAYE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLwC,MAAM,CAACM,QADF,EAEL;AACEvB,MAAAA,KAAK,EAAEV,aADT;AAEEb,MAAAA;AAFF,KAFK;AADT,IAZF,CAXF,CAJF,CAvDF,CAtBF,eAsHE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CAACwC,MAAM,CAACW,WAAR,EAAqBtB,cAAc,CAACsB,WAApC,CADT;AAEE,IAAA,aAAa,EAAC;AAFhB,kBAIE,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAEvF,IAAd;AAAoB,IAAA,IAAI,EAAE,EAA1B;AAA8B,IAAA,KAAK,EAAE4C;AAArC,IAJF,CAtHF,eA6HE,oBAAC,IAAD;AAAM,IAAA,aAAa,EAAC;AAApB,kBACE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAC,YADV;AAEE,IAAA,aAAa,EAAE,CAFjB;AAGE,IAAA,YAAY,EAAEzB,KAAK,GAAGkC,YAAH,GAAkBmC,SAHvC;AAIE,IAAA,aAAa,EAAE,MAJjB;AAKE,IAAA,KAAK,EAAE,CACL;AACE,OAACnE,mBAAmB,IAAIE,KAAvB,GAA+B,OAA/B,GAAyC,MAA1C,GAAmDD,YAAY,GAC3DS,SAAS,GAAGlC,IAAZ,GAAmBuC,YAAY,IAAIxB,IAAI,GAAG,CAAH,GAAO,CAAf,CAD4B,GAE3DwB;AAHN,KADK,EAML;AACEqD,MAAAA,QAAQ,EAAE1D,SADZ;AAEE2D,MAAAA,GAAG,EAAE,CAAC7F,IAAD,GAAQ,CAAR,GAAYqC,UAAU,GAAG,CAFhC;AAGEuC,MAAAA,OAAO,EAAE7C,OAAO,CAACmD,WAAR,CAAoB;AAC3BC,QAAAA,UAAU,EAAElB,gBAAgB,CAAC,CAACZ,QAAD,EAAW,MAAMA,QAAjB,EAA2B,CAA3B,CAAD,CADD;AAE3B+B,QAAAA,WAAW,EAAEnB,gBAAgB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD;AAFF,OAApB,CAHX;AAOEY,MAAAA,SAAS,EAAE,CACT;AACEiB,QAAAA,UAAU,EAAE/D,OAAO,CAACmD,WAAR,CAAoB;AAC9BC,UAAAA,UAAU,EAAElB,gBAAgB,CAAC,CAACZ,QAAD,EAAW,CAAX,CAAD,CADE;AAE9B+B,UAAAA,WAAW,EAAEnB,gBAAgB,CAAC,CAAC,CAAD,EAAIjE,IAAJ,CAAD;AAFC,SAApB;AADd,OADS;AAPb,KANK,EAsBL+E,MAAM,CAAC3E,KAtBF,EAuBLU,SAAS,IAAIiE,MAAM,CAACgB,cAvBf,EAwBL1B,SAxBK;AALT,KAgCGjE,KAhCH,CADF,CA7HF,EAkKG,CAACkB,KAAD;AAAA;AACC;AACA;AACA;AACA;AACA,sBAAC,UAAD;AAAY,IAAA,KAAK,EAAEyD,MAAM,CAACiB;AAA1B,kBACE,oBAAC,IAAD;AAAM,IAAA,YAAY,EAAExC;AAApB,KAAmCpD,KAAnC,CADF,CAvKJ,CADF;AA8KD,CArSD;;AAuSA,MAAM2E,MAAM,GAAG5F,UAAU,CAAC8G,MAAX,CAAkB;AAC/BZ,EAAAA,QAAQ,EAAE;AACRrB,IAAAA,MAAM,EAAEhE;AADA,GADqB;AAI/BQ,EAAAA,QAAQ,EAAE;AACRsE,IAAAA,SAAS,EAAE;AADH,GAJqB;AAO/BE,EAAAA,SAAS,EAAE;AACTkB,IAAAA,QAAQ,EAAE,UADD;AAETpD,IAAAA,eAAe,EAAE;AAFR,GAPoB;AAW/B2C,EAAAA,YAAY,EAAE;AACZU,IAAAA,aAAa,EAAE,KADH;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GAXiB;AAe/Bb,EAAAA,aAAa,EAAE;AACbT,IAAAA,SAAS,EAAE;AADE,GAfgB;AAkB/BU,EAAAA,MAAM,EAAE;AACNV,IAAAA,SAAS,EAAE;AADL,GAlBuB;AAqB/BY,EAAAA,WAAW,EAAE;AACXW,IAAAA,UAAU,EAAE,QADD;AAEXC,IAAAA,cAAc,EAAE,QAFL;AAGXJ,IAAAA,QAAQ,EAAE,UAHC;AAIXlC,IAAAA,MAAM,EAAEhE,IAJG;AAKX8D,IAAAA,KAAK,EAAE9D;AALI,GArBkB;AA4B/BI,EAAAA,KAAK,EAAE;AACL8F,IAAAA,QAAQ,EAAE;AADL,GA5BwB;AA+B/BH,EAAAA,cAAc,EAAE;AACdQ,IAAAA,aAAa,EAAE;AADD,GA/Be;AAkC/BP,EAAAA,wBAAwB,EAAE;AACxBhC,IAAAA,MAAM,EAAE,CADgB;AAExBkC,IAAAA,QAAQ,EAAE;AAFc;AAlCK,CAAlB,CAAf;AAwCA,eAAetG,SAAS,CAACM,WAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../Surface';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport AnimatedText from '../Typography/AnimatedText';\nimport { getCombinedStyles, getFABColors } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  /**\n   * @supported Available in v3.x with theme version 3\n   *\n   * Color mappings variant for combinations of container and icon colors.\n   */\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'surface';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst SCALE = 0.9;\n\n/**\n * An animated, extending horizontally floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/animated-fab.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import React from 'react';\n * import {\n *   StyleProp,\n *   ViewStyle,\n *   Animated,\n *   StyleSheet,\n *   Platform,\n *   ScrollView,\n *   Text,\n *   SafeAreaView,\n *   I18nManager,\n * } from 'react-native';\n * import { AnimatedFAB } from 'react-native-paper';\n *\n * const MyComponent = ({\n *   animatedValue,\n *   visible,\n *   extended,\n *   label,\n *   animateFrom,\n *   style,\n *   iconMode,\n * }) => {\n *   const [isExtended, setIsExtended] = React.useState(true);\n *\n *   const isIOS = Platform.OS === 'ios';\n *\n *   const onScroll = ({ nativeEvent }) => {\n *     const currentScrollPosition =\n *       Math.floor(nativeEvent?.contentOffset?.y) ?? 0;\n *\n *     setIsExtended(currentScrollPosition <= 0);\n *   };\n *\n *   const fabStyle = { [animateFrom]: 16 };\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <ScrollView onScroll={onScroll}>\n *         {[...new Array(100).keys()].map((_, i) => (\n *           <Text>{i}</Text>\n *         ))}\n *       </ScrollView>\n *       <AnimatedFAB\n *         icon={'plus'}\n *         label={'Label'}\n *         extended={isExtended}\n *         onPress={() => console.log('Pressed')}\n *         visible={visible}\n *         animateFrom={'right'}\n *         iconMode={'static'}\n *         style={[styles.fabStyle, style, fabStyle]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flexGrow: 1,\n *   },\n *   fabStyle: {\n *     bottom: 16,\n *     right: 16,\n *     position: 'absolute',\n *   },\n * });\n * ```\n */\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = !theme.isV3,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  variant = 'primary',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { isV3, animation } = theme;\n  const { scale } = animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  const borderRadius = SIZE / (isV3 ? 3.5 : 2);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const { backgroundColor, foregroundColor } = getFABColors({\n    theme,\n    variant,\n    disabled,\n    customColor,\n    style,\n  });\n\n  const rippleColor = color(foregroundColor).alpha(0.12).rgb().string();\n\n  const extendedWidth = textWidth + SIZE + borderRadius;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - borderRadius\n    : textWidth + borderRadius;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  const textStyle = {\n    color: foregroundColor,\n    ...(isV3 ? theme.typescale.labelLarge : theme.fonts.medium),\n  };\n\n  const md2Elevation = disabled || !isIOS ? 0 : 6;\n  const md3Elevation = disabled || !isIOS ? 0 : 3;\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            borderRadius,\n          },\n          !isV3 && {\n            elevation: md2Elevation,\n          },\n          styles.container,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(isV3 && { elevation: md3Elevation })}\n    >\n      <Animated.View\n        style={[\n          !isV3 && {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n          { borderRadius },\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              disabled ? styles.disabled : styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n                borderRadius,\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              disabled ? styles.disabled : styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    borderRadius,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          style={[styles.innerWrapper, { borderRadius }]}\n        >\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n                borderRadius,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={{ borderRadius }}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                    borderRadius,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          variant=\"labelLarge\"\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2)\n                : borderRadius,\n            },\n            {\n              minWidth: textWidth,\n              top: -SIZE / 2 - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            textStyle,\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]}
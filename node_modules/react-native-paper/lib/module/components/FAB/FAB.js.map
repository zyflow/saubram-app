{"version":3,"sources":["FAB.tsx"],"names":["React","Animated","View","StyleSheet","ActivityIndicator","Surface","CrossFadeIcon","Icon","Text","TouchableRipple","withTheme","getExtendedFabStyle","getFABColors","getFabStyle","FAB","icon","label","accessibilityLabel","accessibilityState","animated","color","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","isV3","loading","testID","size","customSize","mode","variant","rest","current","visibility","useRef","Value","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","IconComponent","backgroundColor","foregroundColor","rippleColor","isLargeSize","isFlatMode","iconSize","loadingIndicatorSize","fabStyle","extendedStyle","textStyle","typescale","labelLarge","fonts","medium","borderRadius","flatten","md3Elevation","opacity","transform","styles","container","elevated","elevation","content","uppercaseLabel","create","overflow","flexDirection","alignItems","justifyContent","marginHorizontal","textTransform","FABWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { getExtendedFabStyle, getFABColors, getFabStyle } from './utils';\nimport type { $RemoveChildren, Theme } from '../../types';\n\ntype FABSize = 'small' | 'medium' | 'large';\n\ntype FABMode = 'flat' | 'elevated';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  @deprecated Deprecated in v.3x - use prop size=\"small\".\n   *\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Size of the `FAB`.\n   * - `small` - FAB with small height (40).\n   * - `medium` - FAB with default medium height (56).\n   * - `large` - FAB with large height (96).\n   */\n  size?: FABSize;\n  /**\n   * @supported Available in v5.x\n   *\n   * Custom size for the `FAB`. This prop takes precedence over size prop\n   */\n  customSize?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the `FAB`. You can change the mode to adjust the the shadow:\n   * - `flat` - button without a shadow.\n   * - `elevated` - button with a shadow.\n   */\n  mode?: FABMode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Color mappings variant for combinations of container and icon colors.\n   */\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'surface';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/fab-1.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-2.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-3.png\" />\n *   <img class=\"small\" src=\"screenshots/fab-4.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     icon=\"plus\"\n *     style={styles.fab}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = !theme.isV3,\n  loading,\n  testID = 'fab',\n  size = 'medium',\n  customSize,\n  mode = 'elevated',\n  variant = 'primary',\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { isV3, animation } = theme;\n  const { scale } = animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const { backgroundColor, foregroundColor, rippleColor } = getFABColors({\n    theme,\n    variant,\n    disabled,\n    customColor,\n    style,\n  });\n\n  const isLargeSize = size === 'large';\n  const isFlatMode = mode === 'flat';\n  const iconSize = isLargeSize ? 36 : 24;\n  const loadingIndicatorSize = isLargeSize ? 24 : 18;\n\n  const fabStyle = getFabStyle({ customSize, size, theme });\n  const extendedStyle = getExtendedFabStyle({ customSize, theme });\n  const textStyle = {\n    color: foregroundColor,\n    ...(isV3 ? theme.typescale.labelLarge : theme.fonts.medium),\n  };\n\n  const { borderRadius = fabStyle.borderRadius } = (StyleSheet.flatten(style) ||\n    {}) as ViewStyle;\n\n  const md3Elevation = isFlatMode || disabled ? 0 : 3;\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            borderRadius,\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          !isV3 && styles.elevated,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n      testID={`${testID}-container`}\n      {...(isV3 && { elevation: md3Elevation })}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, label ? extendedStyle : fabStyle]}\n          testID={`${testID}-content`}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent\n              source={icon}\n              size={customSize ? customSize / 2 : iconSize}\n              color={foregroundColor}\n            />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customSize ? customSize / 2 : loadingIndicatorSize}\n              color={foregroundColor}\n            />\n          ) : null}\n          {label ? (\n            <Text\n              variant=\"labelLarge\"\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  elevated: {\n    elevation: 6,\n  },\n  container: {\n    overflow: 'hidden',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]}
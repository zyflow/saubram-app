{"version":3,"sources":["IconButton.tsx"],"names":["React","StyleSheet","TouchableRipple","Icon","CrossFadeIcon","withTheme","getIconButtonColor","Surface","PADDING","IconButton","icon","iconColor","customIconColor","containerColor","customContainerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","theme","style","rest","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","borderStyles","borderWidth","borderRadius","width","height","styles","container","elevation","touchable","supported","top","left","bottom","right","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from '../Icon';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getIconButtonColor } from './utils';\nimport Surface from '../Surface';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  iconColor: customIconColor,\n  containerColor: customContainerColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  selected = false,\n  animated = false,\n  mode,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const { iconColor, rippleColor, backgroundColor, borderColor } =\n    getIconButtonColor({\n      theme,\n      disabled,\n      selected,\n      mode,\n      customIconColor,\n      customContainerColor,\n    });\n\n  const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n  const borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor,\n  };\n\n  return (\n    <Surface\n      style={\n        [\n          {\n            backgroundColor,\n            width: buttonSize,\n            height: buttonSize,\n          },\n          styles.container,\n          borderStyles,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(isV3 && { elevation: 0 })}\n    >\n      <TouchableRipple\n        borderless\n        centered\n        onPress={onPress}\n        rippleColor={rippleColor}\n        accessibilityLabel={accessibilityLabel}\n        style={styles.touchable}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        disabled={disabled}\n        hitSlop={\n          TouchableRipple.supported\n            ? { top: 10, left: 10, bottom: 10, right: 10 }\n            : { top: 6, left: 6, bottom: 6, right: 6 }\n        }\n        {...rest}\n      >\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}
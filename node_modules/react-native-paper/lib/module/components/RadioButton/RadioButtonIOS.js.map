{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["React","StyleSheet","View","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","getSelectionControlIOSColor","RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","contextValue","checkedColor","rippleColor","customColor","color","undefined","onValueChange","styles","container","opacity","displayName","create","borderRadius","padding","RadioButtonIOSWithTheme"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AACA,SAASC,kBAAT,QAA2D,oBAA3D;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,SAAvC;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,SAASC,2BAAT,QAA4C,mBAA5C;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,QAQV;AAAA,MARW;AACtBC,IAAAA,QADsB;AAEtBC,IAAAA,OAFsB;AAGtBC,IAAAA,KAHsB;AAItBC,IAAAA,MAJsB;AAKtBC,IAAAA,KALsB;AAMtBC,IAAAA,MANsB;AAOtB,OAAGC;AAPmB,GAQX;AACX,sBACE,oBAAC,kBAAD,CAAoB,QAApB,QACIC,OAAD,IAAsC;AACrC,UAAMC,OAAO,GACXd,SAAS,CAAC;AACRe,MAAAA,YAAY,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEH,KADf;AAERD,MAAAA,MAFQ;AAGRC,MAAAA;AAHQ,KAAD,CAAT,KAIO,SALT;AAOA,UAAM;AAAEM,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAgCb,2BAA2B,CAAC;AAChEI,MAAAA,KADgE;AAEhEF,MAAAA,QAFgE;AAGhEY,MAAAA,WAAW,EAAEN,IAAI,CAACO;AAH8C,KAAD,CAAjE;AAMA,wBACE,oBAAC,eAAD,eACMP,IADN;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,WAAW,EAAEK,WAHf;AAIE,MAAA,OAAO,EACLX,QAAQ,GACJc,SADI,GAEJ,MAAM;AACJrB,QAAAA,WAAW,CAAC;AACVQ,UAAAA,OADU;AAEVG,UAAAA,KAFU;AAGVW,UAAAA,aAAa,EAAER,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEQ;AAHd,SAAD,CAAX;AAKD,OAbT;AAeE,MAAA,iBAAiB,EAAC,OAfpB;AAgBE,MAAA,kBAAkB,EAAE;AAAEf,QAAAA,QAAF;AAAYQ,QAAAA;AAAZ,OAhBtB;AAiBE,MAAA,uBAAuB,EAAC,QAjB1B;AAkBE,MAAA,KAAK,EAAEQ,MAAM,CAACC,SAlBhB;AAmBE,MAAA,MAAM,EAAEZ;AAnBV,qBAqBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEa,QAAAA,OAAO,EAAEV,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,oBACE,oBAAC,qBAAD;AACE,MAAA,gBAAgB,EAAE,KADpB;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,IAAI,EAAE,EAHR;AAIE,MAAA,KAAK,EAAEE,YAJT;AAKE,MAAA,SAAS,EAAC;AALZ,MADF,CArBF,CADF;AAiCD,GAhDH,CADF;AAoDD,CA7DD;;AA+DAX,cAAc,CAACoB,WAAf,GAA6B,iBAA7B;AAEA,MAAMH,MAAM,GAAG1B,UAAU,CAAC8B,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;AAOA,eAAezB,SAAS,CAACE,cAAD,CAAxB,C,CAEA;;AACA,MAAMwB,uBAAuB,GAAG1B,SAAS,CAACE,cAAD,CAAzC,C,CACA;;AACA,SAASwB,uBAAuB,IAAIxB,cAApC","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]}
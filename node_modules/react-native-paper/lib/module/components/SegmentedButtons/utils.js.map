{"version":3,"sources":["utils.ts"],"names":["StyleSheet","color","black","white","DEFAULT_PADDING","getSegmentedButtonDensityPadding","density","padding","getDisabledSegmentedButtonStyle","theme","index","buttons","width","getSegmentedButtonBorderWidth","isDisabled","disabled","isNextDisabled","borderRightWidth","getSegmentedButtonBorderRadius","segment","borderTopRightRadius","borderBottomRightRadius","isV3","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","checked","colors","secondaryContainer","primary","alpha","rgb","string","getSegmentedButtonBorderColor","surfaceDisabled","outline","dark","hairlineWidth","getSegmentedButtonTextColor","onSurfaceDisabled","onSurface","getSegmentedButtonColors","backgroundColor","borderColor","textColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\nimport color from 'color';\nimport type { Theme } from '../../types';\nimport { black, white } from '../../styles/themes/v2/colors';\n\ntype BaseProps = {\n  theme: Theme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: Theme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: Theme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n}: Omit<BaseProps, 'checked'>) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({ theme, disabled });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"]}
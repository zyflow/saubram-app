{"version":3,"sources":["Snackbar.tsx"],"names":["React","Animated","SafeAreaView","StyleSheet","Easing","Button","Surface","Text","withTheme","DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","visible","action","duration","onDismiss","children","elevation","wrapperStyle","style","theme","rest","current","opacity","useRef","Value","hidden","setHidden","useState","hideTimeout","undefined","scale","animation","useEffect","clearTimeout","useLayoutEffect","timing","toValue","easing","out","ease","useNativeDriver","start","finished","isInfinity","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setTimeout","colors","roundness","isV3","actionStyle","label","actionLabel","onPress","onPressAction","actionProps","marginRight","textColor","inversePrimary","accent","styles","wrapper","container","borderRadius","transform","interpolate","inputRange","outputRange","backgroundColor","onSurface","content","color","surface","button","create","position","bottom","width","flexDirection","justifyContent","alignItems","margin","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  SafeAreaView,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Easing,\n} from 'react-native';\n\nimport Button from './Button/Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Whether the Snackbar is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Label and press callback for the action button. It should contain the following properties:\n   * - `label` - Label of the action button\n   * - `onPress` - Callback that is called when action button is pressed.\n   */\n  action?: Omit<React.ComponentProps<typeof Button>, 'children'> & {\n    label: string;\n  };\n  /**\n   * The duration for which the Snackbar is shown.\n   */\n  duration?: number;\n  /**\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Text content of the Snackbar.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the wrapper of the snackbar\n   */\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Snackbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  wrapperStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default uses `onSurface` color from theme.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const onToggleSnackBar = () => setVisible(!visible);\n *\n *   const onDismissSnackBar = () => setVisible(false);\n *\n *   return (\n *     <View style={styles.container}>\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n *       <Snackbar\n *         visible={visible}\n *         onDismiss={onDismissSnackBar}\n *         action={{\n *           label: 'Undo',\n *           onPress: () => {\n *             // Do something\n *           },\n *         }}>\n *         Hey there! I'm a Snackbar.\n *       </Snackbar>\n *     </View>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Snackbar = ({\n  visible,\n  action,\n  duration = DURATION_MEDIUM,\n  onDismiss,\n  children,\n  elevation = 2,\n  wrapperStyle,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(0.0)\n  );\n  const [hidden, setHidden] = React.useState<boolean>(!visible);\n\n  const hideTimeout = React.useRef<NodeJS.Timeout | undefined>(undefined);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    return () => {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n    };\n  }, []);\n\n  React.useLayoutEffect(() => {\n    if (visible) {\n      // show\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      setHidden(false);\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        easing: Easing.out(Easing.ease),\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) {\n          const isInfinity =\n            duration === Number.POSITIVE_INFINITY ||\n            duration === Number.NEGATIVE_INFINITY;\n\n          if (finished && !isInfinity) {\n            hideTimeout.current = setTimeout(\n              onDismiss,\n              duration\n            ) as unknown as NodeJS.Timeout;\n          }\n        }\n      });\n    } else {\n      // hide\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) setHidden(true);\n      });\n    }\n  }, [visible, duration, opacity, scale, onDismiss]);\n\n  const { colors, roundness, isV3 } = theme;\n\n  if (hidden) return null;\n\n  const {\n    style: actionStyle,\n    label: actionLabel,\n    onPress: onPressAction,\n    ...actionProps\n  } = action || {};\n\n  const marginRight = action ? 0 : 16;\n  const textColor = theme.isV3\n    ? theme.colors.inversePrimary\n    : theme.colors.accent;\n\n  return (\n    <SafeAreaView\n      pointerEvents=\"box-none\"\n      style={[styles.wrapper, wrapperStyle]}\n    >\n      <Surface\n        pointerEvents=\"box-none\"\n        accessibilityLiveRegion=\"polite\"\n        style={\n          [\n            !isV3 && styles.elevation,\n            styles.container,\n            {\n              borderRadius: roundness,\n              opacity: opacity,\n              transform: [\n                {\n                  scale: visible\n                    ? opacity.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.9, 1],\n                      })\n                    : 1,\n                },\n              ],\n            },\n            { backgroundColor: colors?.onSurface },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...(isV3 && { elevation })}\n        {...rest}\n      >\n        <Text style={[styles.content, { marginRight, color: colors?.surface }]}>\n          {children}\n        </Text>\n        {action ? (\n          <Button\n            onPress={() => {\n              onPressAction?.();\n              onDismiss();\n            }}\n            style={[styles.button, actionStyle]}\n            textColor={textColor}\n            compact\n            mode=\"text\"\n            {...actionProps}\n          >\n            {actionLabel}\n          </Button>\n        ) : null}\n      </Surface>\n    </SafeAreaView>\n  );\n};\n\n/**\n * Show the Snackbar for a short duration.\n */\nSnackbar.DURATION_SHORT = DURATION_SHORT;\n\n/**\n * Show the Snackbar for a medium duration.\n */\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\n\n/**\n * Show the Snackbar for a long duration.\n */\nSnackbar.DURATION_LONG = DURATION_LONG;\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4,\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6,\n  },\n  elevation: {\n    elevation: 6,\n  },\n});\n\nexport default withTheme(Snackbar);\n"]}
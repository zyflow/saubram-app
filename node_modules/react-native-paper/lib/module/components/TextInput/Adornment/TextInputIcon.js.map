{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","View","StyleSheet","IconButton","useTheme","getConstants","ICON_SIZE","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","icon","topPosition","side","isV3","ICON_OFFSET","top","contextState","TextInputIcon","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","styles","container","iconButton","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton/IconButton';\nimport type { $Omit, Theme } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { useTheme } from '../../../core/theming';\nimport { getConstants } from '../helpers';\nimport { ICON_SIZE } from '../constants';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus, testID }) => {\n  const { isV3 } = useTheme();\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus, testID };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  const theme = useTheme();\n\n  let iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\n        }\n        testID={testID}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]}
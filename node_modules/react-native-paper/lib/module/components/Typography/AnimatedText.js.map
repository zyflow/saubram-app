{"version":3,"sources":["AnimatedText.tsx"],"names":["React","Animated","I18nManager","StyleSheet","Platform","withTheme","MD3TypescaleKey","AnimatedText","style","theme","variant","rest","writingDirection","isRTL","isV3","stylesByVariant","Object","keys","reduce","acc","key","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","typescale","OS","color","colors","onSurface","styleForVariant","styles","text","fonts","regular","create","textAlign"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAGEC,WAHF,EAKEC,UALF,EAMEC,QANF,QAOO,cAPP;AAQA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAAeC,eAAf,QAA6C,aAA7C;;AAyBA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAT,OAAiE;AAAA,MAA3C;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,OAAhB;AAAyB,OAAGC;AAA5B,GAA2C;AAC/D,QAAMC,gBAAgB,GAAGV,WAAW,CAACW,KAAZ,GAAoB,KAApB,GAA4B,KAArD;;AAEA,MAAIJ,KAAK,CAACK,IAAN,IAAcJ,OAAlB,EAA2B;AACzB,UAAMK,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYX,eAAZ,EAA6BY,MAA7B,CACtB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,UAAZ;AAAwBC,QAAAA,UAAxB;AAAoCC,QAAAA,aAApC;AAAmDC,QAAAA;AAAnD,UACJhB,KAAK,CAACiB,SAAN,CAAgBN,GAAhB,CADF;AAGA,aAAO,EACL,GAAGD,GADE;AAEL,SAACC,GAAD,GAAO,EACL,IAAIhB,QAAQ,CAACuB,EAAT,KAAgB,SAAhB,IAA6B;AAAEF,YAAAA;AAAF,WAAjC,CADK;AAELJ,UAAAA,QAFK;AAGLC,UAAAA,UAHK;AAILC,UAAAA,UAAU,EAAEA,UAJP;AAKLC,UAAAA,aALK;AAMLI,UAAAA,KAAK,EAAEnB,KAAK,CAACoB,MAAN,CAAaC;AANf;AAFF,OAAP;AAWD,KAhBqB,EAiBtB,EAjBsB,CAAxB;AA2BA,UAAMC,eAAe,GAAGhB,eAAe,CAACL,OAAD,CAAvC;AAEA,wBACE,oBAAC,QAAD,CAAU,IAAV,eACMC,IADN;AAEE,MAAA,KAAK,EAAE,CAACoB,eAAD,EAAkBC,MAAM,CAACC,IAAzB,EAA+B;AAAErB,QAAAA;AAAF,OAA/B,EAAqDJ,KAArD;AAFT,OADF;AAMD,GApCD,MAoCO;AACL,wBACE,oBAAC,QAAD,CAAU,IAAV,eACMG,IADN;AAEE,MAAA,KAAK,EAAE,CACLqB,MAAM,CAACC,IADF,EAEL,EACE,IAAI,CAACxB,KAAK,CAACK,IAAP,IAAeL,KAAK,CAACyB,KAAN,CAAYC,OAA/B,CADF;AAEEP,QAAAA,KAAK,EAAEnB,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACoB,MAAN,CAAaC,SAA1B,GAAsCrB,KAAK,CAACoB,MAAN,CAAaI,IAF5D;AAGErB,QAAAA;AAHF,OAFK,EAOLJ,KAPK;AAFT,OADF;AAcD;AACF;;AAED,MAAMwB,MAAM,GAAG7B,UAAU,CAACiC,MAAX,CAAkB;AAC/BH,EAAAA,IAAI,EAAE;AACJI,IAAAA,SAAS,EAAE;AADP;AADyB,CAAlB,CAAf;AAMA,eAAehC,SAAS,CAACE,YAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  Platform,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, variant, ...rest }: Props) {\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.typescale[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            ...(Platform.OS === 'android' && { fontFamily }),\n            fontSize,\n            fontWeight,\n            lineHeight: lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n      />\n    );\n  } else {\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          {\n            ...(!theme.isV3 && theme.fonts.regular),\n            color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]}